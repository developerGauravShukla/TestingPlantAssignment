{"version":3,"file":"static/js/541.00c99481.chunk.js","mappings":"6KAGA,MAeA,EAfsBA,IAKf,IALgB,QACrBC,EAAU,OAAM,QAChBC,EAAO,KACPC,GAAO,EAAI,UACXC,EAAY,IACbJ,EACC,OAAKG,GAGHE,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CAACL,QAASA,EAASG,UAAWA,EAAUG,SACbL,IAJjB,IAKR,C,yGCNZ,MAkEA,EAlE6BF,IAAiB,IAAhB,OAAEQ,GAAQR,EACtC,MAAQS,WAAYC,IAAsBC,EAAAA,EAAAA,MACpC,cAAEC,IAAkBC,EAAAA,EAAAA,KACpBJ,EAAaD,GAAUE,EAwC7B,OACEL,EAAAA,EAAAA,KAAAS,EAAAA,SAAA,CAAAP,UACEQ,EAAAA,EAAAA,MAAA,OACEX,UAAU,2BAA0BG,SAAA,EAEpCF,EAAAA,EAAAA,KAACW,EAAAA,EAAK,CACJC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,IAAI,+DACJC,IAAI,eACJjB,UAAU,iBAEZC,EAAAA,EAAAA,KAAA,QAAMD,UAAU,qBAAoBG,SAAC,mBACrCQ,EAAAA,EAAAA,MAAA,OAAKX,UAAU,oBAAmBG,SAAA,EAChCF,EAAAA,EAAAA,KAAA,MAAID,UAAU,aACdC,EAAAA,EAAAA,KAAA,QAAMD,UAAU,eAAcG,SAAC,QAC/BF,EAAAA,EAAAA,KAAA,MAAID,UAAU,gBAEhBC,EAAAA,EAAAA,KAACiB,EAAAA,EAAW,CAACC,SAvDGC,IAmCpBZ,EAAcY,EAlCK,CACjBC,MAAO,SACPC,KAAM,GACNC,KAAM,UACNC,sBAAsB,EACtBC,QACE,+HACFC,cAAc,EACdC,UAAU,EACVC,kBAAkB,EAClBC,0BAA0B,EAC1BC,qBAAsB,GACtBC,kBAAmB,aAGQC,IAIzBA,GACAA,EAAgBC,OAAS,GACzBD,EAAgB,GAAGE,GAEnB7B,EAAW,CACT,CACE8B,SAAUH,EAAgB,GAAGE,GAC7BE,WAAYJ,EAAgB,GAAG,sBAInCK,QAAQC,KAAK,wCACf,GAGwD,QAsBvD,C,2ECnEP,MA4BA,EA5BoB1C,IAAuD,IAAtD,KAAEG,EAAI,OAAEwC,EAAM,MAAElB,EAAK,SAAElB,EAAQ,cAAEqC,GAAe5C,EACnE,OACEe,EAAAA,EAAAA,MAAC8B,EAAAA,EAAK,CAAC1C,KAAMA,EAAMwC,OAAQA,EAAQG,KAAK,KAAKC,UAAQ,EAAAxC,SAAA,EACnDF,EAAAA,EAAAA,KAACwC,EAAAA,EAAMG,OAAM,CAACC,aAAW,EAAA1C,UACvBF,EAAAA,EAAAA,KAACwC,EAAAA,EAAMK,MAAK,CAAA3C,SAAEkB,GAAS,mBAEzBpB,EAAAA,EAAAA,KAACwC,EAAAA,EAAMM,KAAI,CAAA5C,SAAEA,KACbF,EAAAA,EAAAA,KAACwC,EAAAA,EAAMO,OAAM,CAAA7C,SACVqC,EACCA,EAAcS,KAAI,CAACC,EAAKC,KACtBlD,EAAAA,EAAAA,KAACmD,EAAAA,EAAM,CAELvD,QAASqD,EAAIrD,SAAW,YACxBwD,QAASH,EAAIG,QAAQlD,SAEpB+C,EAAII,OAJAH,MAQTlD,EAAAA,EAAAA,KAACmD,EAAAA,EAAM,CAACvD,QAAQ,YAAYwD,QAASd,EAAOpC,SAAC,cAK3C,C,2ECtBZ,MA4CA,EA5C0BP,IAAkC,IAAjC,KAAEG,EAAI,OAAEwC,EAAM,UAAEgB,GAAW3D,EACpD,OACEK,EAAAA,EAAAA,KAACuD,EAAAA,EAAW,CACVzD,KAAMA,EACNwC,OAAQA,EACRlB,MAAM,qBACNmB,cAAe,CACb,CACEc,MAAO,SACPzD,QAAS,SACTwD,QAASd,GAEX,CACEe,MAAO,SACPzD,QAAS,UACTwD,QAASE,IAEXpD,UAEFQ,EAAAA,EAAAA,MAAA,OAAKX,UAAU,6BAA4BG,SAAA,EACzCF,EAAAA,EAAAA,KAAA,MAAID,UAAU,qBAAoBG,SAAC,oEAInCF,EAAAA,EAAAA,KAACwD,EAAAA,EAAa,CACZ5D,QAAQ,OACRG,UAAU,OACVF,SACEa,EAAAA,EAAAA,MAAA,QAAMX,UAAU,yBAAwBG,SAAA,EACtCF,EAAAA,EAAAA,KAAA,QAAMD,UAAU,YAAWG,SAAC,OAE5BF,EAAAA,EAAAA,KAAA,QAAMD,UAAU,YAAWG,SAAC,iKASxB,C,2GCjClB,MA4IA,EA5ImBP,IAAiB,IAAhB,OAAE8D,GAAQ9D,EAC5B,MAAM+D,GAAkBC,EAAAA,EAAAA,UAAQ,KAE9B,MAAMC,EAAcH,EAAOI,QAAO,CAACC,EAAQC,KACzC,MAAMC,EAAWD,EAAME,MAAM,cACvBC,EAAcH,EAAME,MAAM,mCAC1BE,EAAWJ,EAAMK,MAAM,MAAMC,MAAM,GAAGC,KAAK,MAE3CC,EAAYP,EAAWA,EAAS,GAAK,MACrCQ,EAAaN,EACfA,EAAY,GACZH,EAAMU,SAAS,sBAAuB,YACtC,sBACA,MAaJ,OAXKX,EAAOS,KACVT,EAAOS,GAAa,CAClBA,YACAG,QAAS,GACTjB,OAAQ,KAIZK,EAAOS,GAAWG,QAAQC,KAAKH,GAC/BV,EAAOS,GAAWd,OAAOkB,KAAKR,GAAYJ,GAEnCD,CAAM,GACZ,CAAC,GAGJ,OAAOc,OAAOC,OAAOjB,GAAakB,MAChC,CAACC,EAAGC,IAAMC,OAAOF,EAAER,WAAaU,OAAOD,EAAET,YAC1C,GACA,CAACd,IAEEyB,EAAQ,IAAIC,EAAAA,GAAkB,CAClCC,YAAY,EACZC,cAAe,KAcXC,EAAcC,IAAoC,IAAnC,IAAEC,EAAG,MAAEtC,EAAK,MAAEtC,EAAK,OAAE6E,GAAQF,EAChD,MAAMxB,EAAQL,EAAgBR,GAC9B,OACElD,EAAAA,EAAAA,KAAC0F,EAAAA,GAAY,CAEXR,MAAOA,EACPS,YAAa,EACbC,SAAU1C,EACVuC,OAAQA,EAAOvF,UAEfQ,EAAAA,EAAAA,MAAA,OAAKE,MAAOA,EAAOb,UAAU,YAAWG,SAAA,EACtCF,EAAAA,EAAAA,KAAA,OAAKD,UAAU,aAAaa,MAAO,CAAEC,MAAO,OAAQX,SACjD6D,EAAMQ,aAETvE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,aAAaa,MAAO,CAAEC,MAAO,OAAQX,SACjD6D,EAAMW,QAAQ1B,KAAI,CAAC6C,EAAQC,KAC1B9F,EAAAA,EAAAA,KAAA,OAAAE,SAAc2F,GAAJC,QAGd9F,EAAAA,EAAAA,KAAA,OAAKD,UAAU,aAAaa,MAAO,CAAEC,MAAO,OAAQX,UAClDF,EAAAA,EAAAA,KAAA,MAAID,UAAU,aAAYG,SACvB6D,EAAMN,OAAOT,KAAI,CAAC+C,EAAKD,KACtB9F,EAAAA,EAAAA,KAAA,MAAAE,SAAa6F,GAAJD,aAlBZN,EAuBQ,EAInB,OACE9E,EAAAA,EAAAA,MAAA,OAAKX,UAAU,wBAAuBG,SAAA,EACpCQ,EAAAA,EAAAA,MAAA,OAAKX,UAAU,yBAAwBG,SAAA,EACrCF,EAAAA,EAAAA,KAAA,WACAA,EAAAA,EAAAA,KAACgG,EAAAA,EAAY,CACXpG,QAAQ,UACRwD,QAhDmB6C,KAEzB,MAAMC,EAAaxC,EAAgBV,KAAKe,IAAK,CAC3C,aAAcA,EAAMQ,UACpB,eAAgBR,EAAMW,QAAQJ,KAAK,MACnC,oBAAqBP,EAAMN,OAAOa,KAAK,WAIzC6B,EAAAA,EAAAA,IAAkBD,EAAY,yBAAyB,EAwCjDnG,UAAU,OACVqG,KAAK,kBACL3D,KAAK,WAGTzC,EAAAA,EAAAA,KAACwD,EAAAA,EAAa,CACZ5D,QAAQ,SACRC,SACEa,EAAAA,EAAAA,MAAAD,EAAAA,SAAA,CAAAP,SAAA,EACEF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,uBAAiB,6HAEIwD,EAAgB1B,OAAO,oBAGxDjC,UAAU,kBAGZW,EAAAA,EAAAA,MAAA,OAAKX,UAAU,gBAAeG,SAAA,EAE5BQ,EAAAA,EAAAA,MAAA,OAAKX,UAAU,gBAAeG,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,OAAKD,UAAU,cAAca,MAAO,CAAEC,MAAO,OAAQX,SAAC,gBAGtDF,EAAAA,EAAAA,KAAA,OAAKD,UAAU,cAAca,MAAO,CAAEC,MAAO,OAAQX,SAAC,iBAGtDF,EAAAA,EAAAA,KAAA,OAAKD,UAAU,cAAca,MAAO,CAAEC,MAAO,OAAQX,SAAC,0BAMxDF,EAAAA,EAAAA,KAAA,OAAKD,UAAU,kBAAiBG,UAC9BF,EAAAA,EAAAA,KAACqG,EAAAA,GAAS,CAAAnG,SACPoG,IAAA,IAAC,OAAExF,EAAM,MAAED,GAAOyF,EAAA,OACjBtG,EAAAA,EAAAA,KAACuG,EAAAA,GAAI,CACH1F,MAAOA,EACPC,OAAQA,EACR0F,SAAU9C,EAAgB1B,OAC1ByE,UAAWvB,EAAMuB,UACjBC,yBAA0BxB,EAC1BI,YAAaA,GACb,WAKN,EC3HV,EApB2B3F,IAA+B,IAA9B,KAAEG,EAAI,OAAEwC,EAAM,OAAEmB,GAAQ9D,EAElD,OADAyC,QAAQuE,IAAI,mCAAoClD,IAE9CzD,EAAAA,EAAAA,KAACuD,EAAAA,EAAW,CACVzD,KAAMA,EACNwC,OAAQA,EACRlB,MAAM,iBACNmB,cAAe,CACb,CACEc,MAAO,QACPzD,QAAS,SACTwD,QAASd,IAEXpC,UAEFF,EAAAA,EAAAA,KAAC4G,EAAU,CAACnD,OAAQA,KACR,C,iGCDlB,MA4GA,GA5GuBoD,EAAAA,EAAAA,aACrB,CAAAlH,EAA8CmH,KAAS,IAAtD,KAAEC,EAAI,QAAErC,EAAO,UAAEsC,EAAS,OAAEC,EAAM,MAAEC,GAAOvH,EAC1C,MAAM,iBAAEwH,IAAqBC,EAAAA,EAAAA,MACtBC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,CAAC,IAElDC,EAAAA,EAAAA,YAAU,KACRF,EAAgB,CAAC,EAAE,GAClB,CAACP,IAEJ,MAAMU,EAAWA,KACf,MACMC,EADeC,EAAMC,sBAAsBC,KACd7E,KAChC8E,GAASA,EAAKC,SAAS,qBAGG,IAAzBL,EAAc1F,QAKlBgF,EAAUU,GACVJ,EAAgB,CAAC,IALfH,EAAiBa,EAAAA,GAKA,GAIrBC,EAAAA,EAAAA,qBAAoBnB,GAAK,MACvBW,eAGF,MAAMS,GAAkBvE,EAAAA,EAAAA,UAAQ,IAYvB,CAXiB,CACtB1B,GAAI,SACJkG,KAAM5C,IAAA,IAAC,IAAE6C,GAAK7C,EAAA,OACZvF,EAAAA,EAAAA,KAAA,SACEqI,KAAK,WACLtI,UAAU,mBACVuI,QAASF,EAAIG,gBACbC,SAAUJ,EAAIK,4BACd,MAGsB/D,IAC3B,CAACA,IAEEiD,GAAQe,EAAAA,EAAAA,IAAc,CAC1B3B,OACArC,QAASwD,EACThB,MAAO,CAAEG,gBACTsB,oBAAoB,EACpBC,qBAAsBtB,EACtBuB,iBAAiBA,EAAAA,EAAAA,QAGnB,OACEnI,EAAAA,EAAAA,MAAAD,EAAAA,SAAA,CAAAP,SAAA,EACEQ,EAAAA,EAAAA,MAAA,OAAAR,SAAA,EACEF,EAAAA,EAAAA,KAAA,UACEqI,KAAK,SACLtI,UAAU,+BACVqD,QAASA,KACPuE,EACGmB,cACAjB,KAAKkB,SAASX,GAAQA,EAAIY,gBAAe,IAAM,EAClD9I,SACH,gBAGDF,EAAAA,EAAAA,KAAA,UACEqI,KAAK,SACLtI,UAAU,4BACVqD,QAASA,KACPuE,EACGmB,cACAjB,KAAKkB,SAASX,GAAQA,EAAIY,gBAAe,IAAO,EACnD9I,SACH,oBAKFyH,EAAMmB,cAAcjB,KAAK7F,OAAS,GACjChC,EAAAA,EAAAA,KAAA,OAAKD,UAAU,gBAAgBa,MAAO,CAAEqI,UAAW,QAAS/I,SACzDyH,EAAMmB,cAAcjB,KAAK7E,KAAKoF,IAC7B1H,EAAAA,EAAAA,MAAA,OAEEX,UAAU,8CACVa,MAAO,CACLsI,gBAAiBd,EAAIG,gBAAkB,UAAY,WACnDrI,SAAA,EAEFF,EAAAA,EAAAA,KAAA,OAAKD,UAAU,OAAMG,UAClBiJ,EAAAA,EAAAA,IACCf,EAAIgB,kBAAkB,GAAGvD,OAAOwD,UAAUlB,KAC1CC,EAAIgB,kBAAkB,GAAGE,iBAG7BtJ,EAAAA,EAAAA,KAAA,OAAAE,SAAMkI,EAAIL,SAASrD,EAAQ,GAAG6E,iBAZzBnB,EAAInG,SAiBfjC,EAAAA,EAAAA,KAAA,KAAGD,UAAU,iBAAgBG,SAAC,wBAE/B,G,kOCoFA,MC9MHsJ,EAAkB,4DAElBC,EAAe,GAgIrBC,eAAeC,EAAuBC,EAASC,GAC7C,MAAMC,EAAG,GAAAC,OAAMP,EAAe,4CAAAO,OAA2CF,GAEzE,IACE,MAAMG,QAAiBC,EAAAA,EAAAA,IAAqB,MAAOH,EAAK,GAAIF,GAC5D,OACEI,EAASE,OAAOC,WAAa,GAC7BH,EAASE,OAAOE,QAChBJ,EAASE,OAAOE,OAAOpI,OAAS,GAEzBgI,EAASE,OAAOE,OAAO,GAAGhJ,OAE5B,IACT,CAAE,MAAO2C,GAEP,OADA3B,QAAQ2B,MAAM,2CAADgG,OAA4CF,EAAO,KAAK9F,GAC9D,IACT,CACF,CAQA2F,eAAeW,EAAkBT,EAASU,GACxC,IACE,MAAMC,QA9DVb,eAAgCE,EAASU,GACvC,MAAMR,EAAG,GAAAC,OAAMP,EAAe,mEAAAO,OAAkEO,EAAa,6CAE7G,IACE,MAAMN,QAAiBC,EAAAA,EAAAA,IAAqB,MAAOH,EAAK,GAAIF,GAG5D,OAFAxH,QAAQuE,IAAI,qCAAsCqD,GAClD5H,QAAQuE,IAAI,uBAAwBqD,EAASE,OAAOC,YAElDH,EAASE,OAAOC,WAAa,GAC7BH,EAASE,OAAOE,QAChBJ,EAASE,OAAOE,OAAOpI,OAAS,GAChCgI,EAASE,OAAOE,OAAO,GAAGI,0BAC1BC,MAAMC,QAAQV,EAASE,OAAOE,OAAO,GAAGI,yBAAyBJ,QAE5CJ,EAASE,OAAOE,OAAO,GAAGI,yBAAyBJ,OAErEO,QAAOC,IACN,MAAMC,GAAuBD,EAAUE,YAAc,IAAIC,MAAKC,GAAsB,yBAAdA,EAAKC,OAC3E,OAAOJ,IAAqD,IAA9BA,EAAoBK,KAAc,IAEjElI,KAAI4H,GAAaA,EAAUO,UAEzB,EACT,CAAE,MAAOpH,GAEP,OADA3B,QAAQ2B,MAAM,sCAADgG,OAAuCO,EAAa,KAAKvG,GAC/D,EACT,CACF,CAmC2BqH,CAAiBxB,EAASU,GACjD,GAAwB,IAApBC,EAASvI,OAAc,MAAO,GAElC,MAAMqJ,EAAc,GACpB,IAAK,MAAMxB,KAAWU,EAAU,CAC5B,MAAMe,EAAW7B,EAAasB,MAAKjD,GAAQA,EAAKyD,UAAY1B,IAE5D,GAAIyB,EAEAD,EAAY1G,KAAK2G,EAASlK,WACvB,CAEH,MAAMA,QAAcuI,EAAuBC,EAASC,GAChDzI,IACJqI,EAAa9E,KAAK,CAAE4G,QAAS1B,EAASzI,UACtCiK,EAAY1G,KAAKvD,GAErB,CACA,CACJ,OAAOiK,CACT,CAAE,MAAOtH,GAEP,OADA3B,QAAQ2B,MAAM,sCAADgG,OAAuCO,EAAa,KAAKvG,GAC/D,EACT,CACF,CAUA2F,eAAe8B,EAAe5B,EAAS6B,GACnC,MAAM3B,EAAG,GAAAC,OAAMP,EAAe,8CAAAO,OAA6C0B,EAAU,WAC/EC,EAAO,CACXC,YAAa,EACbC,UAAU,GAIZ,IACE,MAAM5B,QAAiBC,EAAAA,EAAAA,IAAqB,OAAQH,EAAK4B,EAAM9B,GAE/D,GACEI,EAAS6B,QACT7B,EAASE,QACTO,MAAMC,QAAQV,EAASE,OAAOE,QAC9B,CAEA,MAAMlK,EAAW8J,EAASE,OAAOE,OAAOO,QACtC7C,GAAQA,EAAKO,MAAsB,qCAAdP,EAAKO,OAiB5B,aAb+ByD,QAAQC,IACrC7L,EAAS8C,KAAI0G,UACX,MAAMsC,QAAuB3B,EAAkBT,EAASqC,EAAMhK,IAC9D,MAAO,CACLA,GAAIgK,EAAMhK,GACVoG,KAAM4D,EAAM5D,KACZ4C,KAAMgB,EAAMhB,KACZ7J,MAAO6K,EAAM7K,OAAS,KACtB8K,eAAgBF,EACjB,IAKP,CACA,MAAO,EACT,CAAE,MAAOjI,GAEP,OADA3B,QAAQ2B,MAAM,0CAADgG,OAA2C0B,EAAU,KAAK1H,GAChE,EACT,CACF,CAUK2F,eAAeyC,EAAkBvC,EAASwC,EAAcC,GAC7D,IACE,MAAMC,QAhNV5C,eAAqCE,EAASyC,GAC5C,MAAMvC,EAAG,GAAAC,OAAMP,EAAe,mEACxBkC,EAAO,CAACW,GAEd,IACE,MAAMrC,QAAiBC,EAAAA,EAAAA,IAAqB,OAAQH,EAAK4B,EAAM9B,GAC/D,OAAII,EAASE,OAAOC,WAAa,GAAKM,MAAMC,QAAQV,EAASE,OAAOE,QACzDJ,EAASE,OAAOE,OAAOpH,KAAI8E,GAAQA,EAAK2D,aAE5C,EACT,CAAE,MAAO1H,GAEP,OADA3B,QAAQ2B,MAAM,sCAAuCA,GAC9C,EACT,CACF,CAkM8BwI,CAAsB3C,EAASyC,GAEzD,GADAjK,QAAQuE,IAAI,6BAA8B2F,GACf,IAAvBA,EAAYtK,OAAc,MAAO,GAErC,MAAMwK,QAAqBV,QAAQC,IACjCO,EAAYtJ,KAAIf,GA/LtByH,eAAiCE,EAAS6B,GACxC,MAAM3B,EAAG,GAAAC,OAAMP,EAAe,8CAAAO,OAA6C0B,EAAU,oCAErF,IACE,MAAMzB,QAAiBC,EAAAA,EAAAA,IAAqB,MAAOH,EAAK,GAAIF,GAI5D,GAHAxH,QAAQuE,IAAI,wCAAyCqD,GACrD5H,QAAQuE,IAAI,uBAAwBqD,EAASE,OAAOC,YACpD/H,QAAQuE,IAAI,mBAAoBqD,EAASE,OAAOE,QAC3CJ,GACDA,EAASE,QACTF,EAASE,OAAOC,WAAa,GAC7BM,MAAMC,QAAQV,EAASE,OAAOE,SAC9BJ,EAASE,OAAOE,OAAOpI,OAAS,EAAG,CACrC,MAAM8F,EAAOkC,EAASE,OAAOE,OAAO,GAEpC,OADAhI,QAAQuE,IAAI,QAASmB,GACd,CACL2D,WAAY3D,EAAK7F,GACjBgJ,KAAMnD,EAAKmD,KACX7J,MAAO0G,EAAK1G,MACZiH,KAAMP,EAAKO,KACXoE,YAAa3E,EAAK2E,aAAe,KAErC,CACA,OAAO,IACT,CAAE,MAAO1I,GAEP,OADA3B,QAAQ2B,MAAM,yCAADgG,OAA0C0B,EAAU,KAAK1H,GAC/D,IACT,CACF,CAmK4B2I,CAAkB9C,EAAS3H,MAGnDG,QAAQuE,IAAI,yBAA0B6F,GAEtC,MAAMG,EAAQH,EAAa7B,QAAO7C,GAAiB,OAATA,IAGpC8E,EAAiB,IAAIC,IACzBF,EACG3J,KAAI8E,GAAQA,EAAK2E,cACjB9B,OAAOmC,SACP9J,KAAI+J,GAAMA,EAAG3I,MAAM,KAAK,MAG7BhC,QAAQuE,IAAI,oBAAqBiG,GAEjC,MAAMI,EAAS,GAEf,IAAK,MAAMlF,KAAQ6E,EAAO,CACxB,MAAMM,EAAWL,EAAeM,IAAIpF,EAAKmD,MACnCkC,EAAgBrF,EAAK2D,aAAeW,EAC1ChK,QAAQuE,IAAI,oBAADoD,OAAqBjC,EAAKmD,KAAI,gBAAAlB,OAAekD,EAAQ,qBAAAlD,OAAoBoD,IAGpF,MAAMnB,QAAuB3B,EAAkBT,EAAS9B,EAAK2D,YAC7DrJ,QAAQuE,IAAI,6BAA8BqF,GAG1C,IAAI9L,EAAW,IACX+M,GAAYE,KACdjN,QAAiBsL,EAAe5B,EAAS9B,EAAK2D,aAGhDuB,EAAOrI,KAAK,CACV8G,WAAY3D,EAAK2D,WACjBR,KAAMnD,EAAKmD,KACX7J,MAAO0G,EAAK1G,MACZiH,KAAMP,EAAKO,KACX4E,WACAE,gBACAjB,eAAgBF,EAChB9L,YAEJ,CAIA,OAFAkC,QAAQuE,IAAI,wBAAyBqG,GAE9BA,CACT,CAAE,MAAOjJ,GAEP,OADA3B,QAAQ2B,MAAM,8BAA+BA,GACtC,EACT,CACF,CC9SO,MAAMqJ,EAAiB1D,UAC5B,IACE,IAAI2D,EAAmBC,OAAOC,OAAOC,SAAS,eAC9C,MAAMC,QAAgBC,EAAAA,EAAAA,MACtBtL,QAAQuE,IAAI,uBAAwB0G,GACpC,MAAMM,EAAUC,6GAEV5D,QAAiB,IAAI8B,SAAQ,CAAC+B,EAASC,KAC3CL,EAAQM,qBAAqBJ,EAAS,CACpCK,OAAQ,MACR3F,KAAM,OACN4F,WAAYJ,EACZK,UAAWJ,GACX,IAGEK,EAAYnE,EAASoE,KAAKnD,KAC1BoD,EAAYrE,EAASoE,KAAKlD,MAC1BoD,EAAwB,kBACxBC,EAAuBlB,EAM7B,MAJgB,CACd,CAACc,GAAYE,EACb,CAACC,GAAwBC,EAG7B,CAAE,MAAOxK,GAEP,YADA3B,QAAQ2B,MAAM,gCAAiCA,EAEjD,GCGIyF,EAAkBoE,4DAiQxB,EAhQ2BY,KACzB,MAAM,eAAEC,IAAmBrH,EAAAA,EAAAA,KACrBsH,GAAWC,EAAAA,EAAAA,MAGjB,IAAIC,EAAQtB,OAAOC,OAAOC,SAAS,SACnCpL,QAAQuE,IAAI,+BAAgCiI,GAuP5C,MAAO,CAAEC,gBArPenF,MAAOoF,EAAa5H,EAAOhF,EAAUmG,KAC3D,IACEqG,GAASK,EAAAA,EAAAA,KAAwB,IAGjC,MAAMnF,QAAgBwD,IACtB,IAAKxD,EAEH,YADA6E,EAAeO,EAAAA,IAGjB5M,QAAQuE,IAAI,gCAAiCiD,GAK7C,GAAa,kBAATvB,EAA0B,CAa5BjG,QAAQuE,IAAI,mCAiGd,KAAO,CAyBL,IAAIsI,EAAY,GAChB,MAAMC,QAAwBC,EAAcjN,EAAS0H,GAErD,GADAxH,QAAQuE,IAAI,qCAAsCuI,GAC/CA,EAAgBzD,WAAW,CAC5BwD,QA4RVvF,eAA+BE,EAAS1H,GACtC,MAAM4H,EAAG,GAAAC,OAAMP,EAAe,mEAAAO,OAAkE7H,EAAQ,6CAExG,IACE,MAAMkN,QAAqBnF,EAAAA,EAAAA,IAAqB,MAAOH,EAAK,GAAIF,GAEhE,GAAIwF,EAAavD,QAAUuD,EAAalF,OAAQ,CAAC,IAADmF,EAC9C,MAAMC,GAAwE,QAAtDD,EAAAD,EAAalF,OAAOE,OAAO,GAAGI,gCAAwB,IAAA6E,OAAA,EAAtDA,EAAwDjF,SAAU,GAEpF4C,EAAS,GAEf,IAAK,MAAMpC,KAAa0E,EAAiB,CAAC,IAADC,EACvC,MAAMtN,EAAK2I,EAAUO,QACfqE,EAAa5E,EAAUE,YAAc,GAI3C,GAF0F,QAAhEyE,EAAGC,EAAWzE,MAAKC,GAAsB,yBAAdA,EAAKC,cAAgC,IAAAsE,OAAA,EAA7DA,EAA+DrE,MAElE,CACxB,MAAM9J,QAAcqO,EAAkB7F,EAAS3H,GAC/C+K,EAAOrI,KAAK,CACV1C,KACAb,SAEJ,CACF,CAEA,OAAO4L,CACT,CAEE,OADA5K,QAAQuE,IAAI,mCAADoD,OAAoC7H,IACxC,EAEX,CAAE,MAAO6B,GAEP,OADA3B,QAAQ2B,MAAM,mCAADgG,OAAoC7H,EAAQ,KAAK6B,GACvD,EACT,CACF,CA/T4B2L,CAAgB9F,EAASsF,EAAgBzD,YAE3D,MAAMkE,QAAoBxD,EAAkBvC,EAAS1H,EAAUgN,EAAgBzD,YAE/ErJ,QAAQuE,IAAI,uCAAwCgJ,GAEpDjB,GAASkB,EAAAA,EAAAA,IAAqBD,IAE9B,MAAME,QFuGTnG,eAAiCoG,EAAoBb,GAExD,MAAMc,EAAgBd,EAAUjM,KAAI8E,GAAQA,EAAK1G,QACjDgB,QAAQuE,IAAI,2BAA4BoJ,GAGxC,MAAMC,EAAiBF,EAAmB/E,MAAKkF,IAA6B,IAAtBA,EAAI9C,gBAE1D,IAAK6C,EAEH,OADA5N,QAAQC,KAAK,uDACN,CACL6J,eAAgB,GAChBgE,gBAAiBH,GAKrB,MAAM/D,EAAiBgE,EAAe9D,gBAAkB,GAGlDiE,EAAc,GAEpBL,EAAmB/G,SAAQqH,IACpBA,EAAQnD,WACImD,EAAQlE,gBAAkB,IAClCnD,SAAQsH,IACRF,EAAY1L,SAAS4L,IACxBF,EAAYxL,KAAK0L,EACnB,GAEJ,IAIF,MAAMC,EAAkBP,EAAcpF,QAAO0F,IAAUF,EAAY1L,SAAS4L,KAM5E,OAJAjO,QAAQuE,IAAI,mBAAoBqF,GAChC5J,QAAQuE,IAAI,oBAAqB2J,GAG1B,CACLpE,eAAgBF,EAChBkE,gBAAiBI,EAErB,CEnJiCC,CAAkBZ,EAAYV,GACvD7M,QAAQuE,IAAI,+BAAgCkJ,GAE5CnB,GAAS8B,EAAAA,EAAAA,IAAuB,CAC9BC,sBAAuBZ,EAAW3D,eAClCwE,aAAcb,EAAWK,kBAE7B,CAyDA,MAAMS,OC5QgBjH,OAAOE,EAASgH,EAAU1J,KACtD,MAAMsC,EAAkBoE,4DACxB,IAAIiD,GAAY,EACZC,EAAuB,GACvBC,EAAY,CAAC,OAAS,GAAI,SAAW,IACzC,MAAMC,EAAkB,CAAC,uBAAwB,wBAC3CC,EAAY,GAAAlH,OACbP,EAAe,mDAEpB,IAAIkC,EAAO,CACTwF,SAAU,+CACVC,UAAW,CAAC,uBAAwB,wBACpCC,kBAAkB,EAClBC,kBAAkB,EAClBC,sBAAsB,EACtBC,kBAAmB,CAAC,cAAe,YAAa,kBAAkB,cAClElO,MAAO,mCACPmO,KAAM,KACNC,WAAW,GAETC,EAAI,GAAA3H,OACHP,EAAe,iDAChBmI,EAAK,CACPT,SAAU,+CACVU,aAAc,oBACdvO,MAAO,mCACPwO,IAAK,CAACjB,IAGR,IACExO,QAAQuE,IAAI,+BAAgCiK,GAE5C,MAAMnD,QAAgBC,EAAAA,EAAAA,MAEhB1D,QAAiB,IAAI8B,SAAQ,CAAC+B,EAASC,KAC3CL,EAAQM,qBAAqBkD,EAAc,CACzCjD,OAAQ,OACRpE,SAAOkI,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFlI,GAAO,IACV,eAAgB,qBAElB7C,KAAMgL,KAAKC,UAAUtG,GACrBrD,KAAM,OACN4F,WAAYJ,EACZK,UAAWJ,GACX,IAKJ,GAFA1L,QAAQuE,IAAI,0CAA2CqD,GAE/B,OAApBA,EAAS6B,OAAiB,CAC5B,MAAMoG,QAAkB,IAAInG,SAAQ,CAAC+B,EAASC,KAC5CL,EAAQM,qBAAqB2D,EAAM,CACjC1D,OAAQ,OACRpE,SAAOkI,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFlI,GAAO,IACV,eAAgB,qBAElB7C,KAAMgL,KAAKC,UAAUL,GACrBtJ,KAAM,OACN4F,WAAYJ,EACZK,UAAWJ,GACX,IAGJ1L,QAAQuE,IAAI,0CAA2CsL,GACvD,IAAK,MAAMC,KAAWlB,EAChBiB,EAAUE,kBAAkBD,UACxBpG,QAAQC,IACZkG,EAAUE,kBAAkBD,GAASlP,KAAI0G,UACvC,MAAMmC,EAASuG,EAAI,eAAe/N,MAAM,IAClC4C,EAASmL,EAAI,cAEnB,GAAe,aAAXvG,EAAuB,CACzB,MAAMwG,EAAI,GAAAtI,OAAMP,EAAe,4CAAAO,OAA2CqI,EAAInQ,GAAE,qDAE1EqQ,QAAkB,IAAIxG,SAAQ,CAAC+B,EAASC,KAC5CL,EAAQM,qBAAqBsE,EAAM,CACjCrE,OAAQ,MACRpE,UACAvB,KAAM,OACN4F,WAAYJ,EACZK,UAAWJ,GACX,IAEJ1L,QAAQuE,IAAI,8BAA+B2L,GAE3B,yBAAZJ,EACEzH,MAAMC,QAAQ4H,EAAUC,kBAC1BD,EAAUC,gBAAgBxJ,SAASyJ,IACjC1B,EAAqBnM,KAAK,CACxB8G,WAAY+G,EAAeC,MAAMhH,WACjCiH,OAAQF,EAAeG,MAAM,GAAGC,MAChC,IAIFnI,MAAMC,QAAQ4H,EAAUO,kBACxBP,EAAUO,gBAAgB9J,SAAS+J,IACjChC,EAAqBnM,KAAK,CACxB8G,WAAYqH,EAAeL,MAAMhH,WACjCiH,OAAQI,EAAeC,WAAW,IAClC,IAMNlC,EAD0B,aAAxB3J,EAAM8L,eACIlC,EAAqBmC,MAC9BC,GACCA,EAAOzH,aAAemF,GACJ,WAAlBsC,EAAOR,SAKX7B,IACFE,EAAkB,OAAI9J,EACtB8J,EAAoB,SAAIlF,EAE5B,KAKV,MACEzJ,QAAQ2B,MAAM,wBAKhB,OAHA3B,QAAQuE,IAAI,6BACZvE,QAAQuE,IAAI,sBAAuBkK,GAE5B,CACLsC,SAAS,EACTpM,KAAM8J,EACNuC,OAASrC,EACTwB,gBAAiBzB,EAErB,CAAE,MAAO/M,GAQP,MAPA3B,QAAQ2B,MAAM,kBAAmB,CAC/B+F,IAAKmH,EACLrH,UACA8B,OACA3H,UAGIA,CACR,GD0HiCsP,CAAezJ,EAAS1H,EAAUgF,GAC7D9E,QAAQuE,IAAI,qCAAsCgK,GAE9CA,EAAawC,SACfzE,GAAS4E,EAAAA,EAAAA,IAAsB3C,EAAa5J,OAK9C3E,QAAQuE,IAAI,yDACd,CACF,CAAE,MAAO5C,GACP3B,QAAQ2B,MAAM,4BAA6BA,GAC3C0K,EAAe,0DACjB,CAAC,QACCC,GAASK,EAAAA,EAAAA,KAAwB,GACnC,GAGwB,EA0K5BrF,eAAeyF,EAAc1D,EAAY7B,GACvC,IAAIE,EAAM,GAEVA,EAAG,GAAAC,OAAMP,EAAe,8CAAAO,OAA6C0B,EAAU,uBAE/E,IACE,MAAM2D,QAAqBnF,EAAAA,EAAAA,IAAqB,MAAOH,EAAK,GAAIF,GAEhE,OAAIwF,EAAavD,QAAUuD,EAAalF,OAC/B,CACLuB,WAAY2D,EAAalF,OAAOE,OAAO,GAAGmJ,aAAa9H,WACvDpD,KAAM+G,EAAalF,OAAOE,OAAO,GAAGmJ,aAAalL,OAGnDjG,QAAQuE,IAAI,oCAADoD,OAAqC0B,IACzC,CAAC,EAEZ,CAAE,MAAO1H,GAEP,OADA3B,QAAQ2B,MAAM,mCAADgG,OAAoC0B,EAAU,KAAK1H,GACzD,CAAC,CACV,CACF,CAuCA2F,eAAe+F,EAAkB7F,EAASC,GACxC,MAAMC,EAAG,GAAAC,OAAMP,EAAe,4CAAAO,OAA2CF,GAEzE,IACE,MAAMG,QAAiBC,EAAAA,EAAAA,IAAqB,MAAOH,EAAK,GAAIF,GAE5D,GAAII,EAAS6B,QAAU7B,EAASE,QAAUF,EAASE,OAAOE,QAAUJ,EAASE,OAAOE,OAAOpI,OAAS,EAAG,CAErG,OADkBgI,EAASE,OAAOE,OAAO,GACxBhJ,OAAS,IAC5B,CAEE,OADAgB,QAAQuE,IAAI,8BAADoD,OAA+BF,IACnC,IAEX,CAAE,MAAO9F,GAEP,OADA3B,QAAQ2B,MAAM,0CAADgG,OAA2CF,EAAO,KAAK9F,GAC7D,IACT,CACF,C,aEzfA,MAuKA,EAvKiCyP,KAC/B,MAAM,eAAE/E,IAAmBrH,EAAAA,EAAAA,MACrB,gBAAEyH,GAAoBL,IACtBiF,GAAYC,EAAAA,EAAAA,KAAaxM,GAAUA,EAAMyM,cAAcF,YACvDG,GAAUF,EAAAA,EAAAA,KAAaxM,GAAUA,EAAMyM,cAAcC,UACrDlF,GAAWC,EAAAA,EAAAA,MAEXkF,GAAqBC,EAAAA,EAAAA,cACzBpK,UACE,IACE,MAAMqK,QAA4BC,EAAAA,EAAAA,IAAwB,CACxDC,cAkCF,GAAIF,EAAoBZ,QAAS,CAO/BzE,GACEwF,EAAAA,EAAAA,IAAqB,CACnBC,SAAUJ,EAAoBhN,KAAKoN,YAIvC,MAAMC,EAAoBL,EAAoBhN,KAAKoN,SAMzB,IAADE,EAAAC,EAAzB,GALAlS,QAAQuE,IAAI,sBAAuByN,GAEnC1F,GAAS6F,EAAAA,EAAAA,KAAmB,IAGxBR,QACIlF,EACJuF,EAAkB,uBAClBA,EAAkB,kBACN,QADuBC,EACnCJ,EAAU,UAAE,IAAAI,OAAA,EAAZA,EAAcnS,SACF,QADUoS,EACtBL,EAAU,UAAE,IAAAK,OAAA,EAAZA,EAAcnS,WAGpB,MACEsM,EAAe+F,EAAAA,GAEnB,CAAE,MAAOzQ,GACP3B,QAAQ2B,MAAM,+CAAgDA,GAC9D0K,EAAe+F,EAAAA,GACjB,CAAC,QACC9F,GAAS+F,EAAAA,EAAAA,KAAW,GACtB,IAEF,CAAC/F,EAAUG,IAGPzO,GAAa0T,EAAAA,EAAAA,cACjBpK,UACEtH,QAAQuE,IAAI,iDAAkDsN,GAE9D,IACE,GAAIA,GAAaA,EAAUjS,OAAS,EAAG,CAAC,IAAD0S,EAErC,MAAMvS,EAAyB,QAAfuS,EAAGT,EAAU,UAAE,IAAAS,OAAA,EAAZA,EAAcvS,WAWjC,IAVmB,CAIjB,YACA,iBACA,iBACA,UACA,4BAEcsC,SAAStC,GAEvB,YADAsM,EAAekG,EAAAA,IAGjBjG,GAAS6F,EAAAA,EAAAA,KAAmB,IAE5BnS,QAAQuE,IAAI,+DACZ+H,GAAS+F,EAAAA,EAAAA,KAAW,IACpBG,YAAW,IAAMlG,GAAS+F,EAAAA,EAAAA,KAAW,KAAQ,SACvCZ,EAAmBI,EAC3B,MACE7R,QAAQC,KAAK,yCAEjB,CAAE,MAAO0B,GACP3B,QAAQ2B,MAAM,8BAA+BA,GAC7C2K,GAAS+F,EAAAA,EAAAA,KAAW,IACpBrS,QAAQuE,IACN,8DAEF8H,EAAeoG,EAAAA,GACjB,IAWF,CAAChB,EAAoBpF,IA0BvB,MAAO,CACLqG,yBAxB8BhB,EAAAA,EAAAA,cAAY,KAErCL,EAMHrR,QAAQuE,IACN,gFANFvE,QAAQuE,IACN,0EAEF+H,GAAS6F,EAAAA,EAAAA,KAAmB,KAM9B,MAAMQ,EAAWC,aAAY,KAC3B,MAAMC,EAAqBC,SAASC,cAAc,wBAC9CF,IACFG,cAAcL,IACdM,EAAAA,EAAAA,IAAcJ,EAAoB7U,EAAYsO,EAAUD,GAC1D,GACC,KAEH,MAAO,IAAM2G,cAAcL,EAAS,GACnC,CAAC3U,EAAYsO,IAIdkF,UACAxT,aACD,E,aC1LH,MA8EA,EA9EwBkV,KACtB,MAAM,WAAElV,GAAeoT,KACjB,iBAAE+B,EAAgB,eAAE9G,IAAmBrH,EAAAA,EAAAA,MACtCwM,EAASa,IAAclN,EAAAA,EAAAA,WAAS,GAEvCnF,QAAQuE,IAAI,kCAsEZ,OA7DAa,EAAAA,EAAAA,YAAU,KACR,IAAK8F,OAAOC,OAAQ,OAqDpBnL,QAAQoT,MAAM,+DACdlI,OAAOC,OAAOkI,SAAS,aAlDL/L,UAAa,IAADgM,EAAAC,EAC5B,MAAMH,GAAQ,IAAII,OAAQC,MAAMzR,MAAM,MAGhC0R,EAAqBC,eAAeC,QAAQ,sBAElD,GAlB4BR,IACvBA,EAAMvC,MACVgD,GACCA,EAAKxR,SAAS,uBAAyBwR,EAAKxR,SAAS,mBAenDyR,CAAuBV,KAAWM,EAIpC,YAHA1T,QAAQC,KACN,kFAOJ0T,eAAeI,WAAW,sBAM1B1B,GAAW,GAEX,MACM2B,EADcC,EAAAA,EAAMC,WAEZ3C,cAAc4C,kBAAkBC,mBAE9C,GAAsB,OAAjBJ,QAAiB,IAAjBA,GAAuB,QAANV,EAAjBU,EAAmBrP,YAAI,IAAA2O,GAAO,QAAPC,EAAvBD,EAAyB/I,aAAK,IAAAgJ,IAA9BA,EAAgC3T,OAMnC,OALAI,QAAQ2B,MACN,6EACAqS,QAEF3B,GAAW,GAIb,UAIQgC,EAAAA,EAAAA,GAAkBL,EAAkBrP,KAAK4F,MAAOvM,EACxD,CAAE,MAAO2D,GACP3B,QAAQ2B,MAAM,iDAA6CA,GAC3D0K,EAAeiI,EAAAA,GACjB,CAAC,QACCjC,GAAW,GACXc,EAAiBoB,EAAAA,GACnB,IAG4C,GAI7C,IAEI/C,GAAU5T,EAAAA,EAAAA,KAAC4W,EAAAA,EAAM,IAAK,IAAI,E,kDChFnC,MA4IaC,EAAgB,CAC3B,CAAEtN,YAAa,kBAAmBuN,OAAQ,oB,gCCjI5C,MAkGA,EAlGkCnX,IAa3B,IAb4B,WACjCoX,EAAU,WACVC,EAAU,OACVC,EAAM,SACNC,EAAQ,WACRC,EAAU,aACVC,EAAY,OACZnQ,EAAM,MACNC,EAAK,KACLmB,EAAI,WACJgP,EAAU,SACVC,EAAQ,cACRC,GACD5X,EACC,MAAM,iBAAEwH,EAAgB,iBAAEoO,IAAqBnO,EAAAA,EAAAA,MACxCoQ,EAAeC,IAAoBlQ,EAAAA,EAAAA,WAAS,GAC7CmQ,GAAoBC,EAAAA,EAAAA,UAQ1BvV,QAAQuE,IAAI,uBAAwBwQ,GAQpC,OACEzW,EAAAA,EAAAA,MAAAD,EAAAA,SAAA,CAAAP,SAAA,EACEQ,EAAAA,EAAAA,MAAA,OAAKX,UAAU,sBAAqBG,SAAA,EAClCF,EAAAA,EAAAA,KAAA,UACID,UAAU,qCACVqD,QAASA,KAEM,kBAATiF,GAEOpB,EADTwQ,GAAiB,GAIjBtQ,EADmB,aAAVD,EACQ0Q,EAAAA,GAEAC,EAAAA,GACnB,EACA3X,SACH,eAIJF,EAAAA,EAAAA,KAAA,UACGD,UAAU,oCACVqD,QArCa0U,KACfZ,GACFA,GACF,EAkC4BhX,SACvB,eAOHF,EAAAA,EAAAA,KAACuD,EAAAA,EAAW,CACVzD,KAAM0X,EACNlV,OAAQA,IAAMmV,GAAiB,GAC/BrW,MAAM,kBACNmB,cAAe,CACb,CACEc,MAAO,MACPzD,QAAS,UACTwD,QAASA,KAAO,IAAD2U,EACY,QAAzBA,EAAAL,EAAkBM,eAAO,IAAAD,GAAzBA,EAA2BtQ,WAC3BgQ,GAAiB,EAAM,GAG3B,CACEpU,MAAO,QACPzD,QAAS,SACTwD,QAASA,IAAMqU,GAAiB,KAElCvX,UAEFF,EAAAA,EAAAA,KAAA,OAAKD,UAAU,aAAYG,UACzBF,EAAAA,EAAAA,KAACiY,EAAAA,EAAc,CACbnR,IAAK4Q,EACL3Q,KAAMoQ,EACNzS,QAAS0S,EACTnQ,OAAQA,EACRD,UA/DUD,IAClB3E,QAAQuE,IAAII,GACZiQ,EAAWjQ,GACPwQ,GAAeA,GAAc,EAAK,EA6D9BrQ,MAAOA,UAIZ,E,sCC7CP,MAmVA,EAnVwBgR,KACtB,MAAM,6BAAEC,EAA4B,2BAAEC,IACpCC,EAAAA,EAAAA,MACKC,EAAmBC,IAAwBhR,EAAAA,EAAAA,WAAS,IACrD,wBAAEuN,EAAuB,QAAElB,GAAYJ,KACtCgF,EAAUC,IAAelR,EAAAA,EAAAA,UAAS,IAClCmR,EAAWC,IAAgBpR,EAAAA,EAAAA,UAAS,KACpCqR,EAAeC,IAAoBtR,EAAAA,EAAAA,UAAS,KAC5CuR,EAAYC,IAAiBxR,EAAAA,EAAAA,UAAS,KACtCyR,EAAoBC,IAAyB1R,EAAAA,EAAAA,UAAS,KACvD,WAAEnH,GAAeoT,KAChB0F,EAAgBC,IAAqB5R,EAAAA,EAAAA,WAAS,IAC9C6R,EAAcC,IAAmB9R,EAAAA,EAAAA,WAAS,IAC1C+R,EAAqBC,IAA0BhS,EAAAA,EAAAA,WAAS,IACxDiS,EAAcC,IAAmBlS,EAAAA,EAAAA,WAAS,GAC3CmH,GAAWC,EAAAA,EAAAA,OACV+K,EAAkBC,IAAuBpS,EAAAA,EAAAA,UAAS,KAClD8P,EAAYE,IAAiBhQ,EAAAA,EAAAA,WAAS,GAC7C,IAAI8F,EAAmBC,OAAOC,OAAOC,SAAS,eAC9CpL,QAAQuE,IAAI,wBAAyB0G,GAmDrCjL,QAAQuE,IAAI,2BAA4B+R,GACxC,MAAMkB,GAAoBlG,EAAAA,EAAAA,KACvBxM,GAAUA,EAAMyM,cAAciG,qBAIjCpS,EAAAA,EAAAA,YAAU,KACJoS,EAAkB5X,OAAS,GAC7BuV,GAAc,EAChB,GACC,CAACqC,IAGJ,MAAMrD,GAAoB7C,EAAAA,EAAAA,KACvBxM,GAAUA,EAAMyM,cAAc4C,oBAEjCnU,QAAQuE,IAAI,oBAAqB4P,GAEjC,MAAMsD,GAAuBnG,EAAAA,EAAAA,KAC1BxM,GAAUA,EAAMyM,cAAckG,uBAEjCzX,QAAQuE,IAAI,yBAA0BkT,GAEtC,MAAMpG,GAAYC,EAAAA,EAAAA,KAAaxM,GAAUA,EAAMyM,cAAcF,YAEvDqG,GAAcpG,EAAAA,EAAAA,KACjBxM,GAAUA,EAAMyM,cAAcoG,oBAAoBrJ,eAErDtO,QAAQuE,IAAI,oCAAqCmT,GAEjD,MAAME,GAAetG,EAAAA,EAAAA,KAClBxM,GAAUA,EAAMyM,cAAcoG,oBAAoBtJ,wBAErDrO,QAAQuE,IAAI,2BAA4BqT,GAExC,MAAM/S,GAASyM,EAAAA,EAAAA,KACZxM,GAAUA,EAAMyM,cAAcoG,oBAAoB9S,SAYrD,IATAO,EAAAA,EAAAA,YAAU,KACRuR,EAAce,EAAY,GACzB,CAACA,KAEJtS,EAAAA,EAAAA,YAAU,KACJkR,EAAU1W,QAAU,GACtByW,GAAawB,GAAYA,EAAU,GACrC,GACC,CAACvB,IACAnC,EAAkBpC,UAAYoC,EAAkBC,mBAAqB,IAAD0D,GAAAC,GAClEjT,GAAQqP,EAAkBpC,SAAS,kBACnC9L,GAA2C,QAAvC6R,GAAG3D,EAAkBC,0BAAkB,IAAA0D,IAAM,QAANC,GAApCD,GAAsCnT,YAAI,IAAAoT,QAAN,EAApCA,GAA4CxN,MAAM,GAAGxK,WAGlE,MAAOiY,GAA2BC,KAChC9S,EAAAA,EAAAA,UAASyS,GACX5X,QAAQuE,IACN,0CACAyT,KAEF5S,EAAAA,EAAAA,YAAU,KACR6S,GAA6BL,GAC7BnB,EAAiBmB,EAAa,GAC7B,CAACA,EAAc3R,MAKlBb,EAAAA,EAAAA,YAAU,KACHiM,GACHqB,GACF,GACC,CAACrB,EAAWqB,KAGftN,EAAAA,EAAAA,YAAU,KACR2R,EAAkBU,EAAqB,GACtC,CAACA,IAGJ,MAAMS,IAAe3W,EAAAA,EAAAA,UAAQ,IF5IF+U,KAK3B,GAHAtW,QAAQuE,IAAI,2BAA4B+R,IAGnCA,EAAW,MAAO,GAGvB,IAAI6B,EAAa7B,EAAU1V,KAAK+D,IAIrB,CACLyT,MAAOzT,GAAQ,UAuBrB,OAJEwT,EAAWzV,MAAK,CAACC,EAAGC,IAAMD,EAAEyV,MAAMC,cAAczV,EAAEwV,SAI7CD,CAAU,EEyGRG,CAAa9B,IACnB,CAACA,IAEE+B,IAAkBhX,EAAAA,EAAAA,UACtB,IFzG+BmV,IAC5BA,EACEA,EAAW9V,KAAKqN,IAAK,CAC1B,kBAAmBA,GAAS,UAFN,GEwGhBuK,CAAmB9B,IACzB,CAACA,IAEH1W,QAAQuE,IAAI,wCAAyCgU,IAGrD,MAAMxG,IAAWxQ,EAAAA,EAAAA,UACf,IFrLwB4S,KAC1B,IAAKA,IAAsBA,EAAkBpC,SAC3C,OAAO,KAGT,MAAMrM,EAAOyO,EAAkBpC,SAE/B,IAAIA,EAAW,CACb/S,MAAO0G,EAAKjF,OAAS,MACrBwF,KAAMP,EAAK+S,MAAQ,MACnB,iBAAkB/S,EAAK,mBAAqB,MAC5CgT,MAAOhT,EAAKiT,OAAS,MACrB,4BAA6BjT,EAAK,8BAAgC,MAClEkT,YAAalT,EAAKkT,aAAe,MACjC,mBAAoBlT,EAAK,qBAAuB,MAChD,2BAA4BA,EAAK,6BAA+B,MAChE,aAAcA,EAAK,eAAiB,MACpCmT,SACEnT,EAAKmT,UAAQ,GAAAlR,OA3DK6D,4DA4DA,+DAOtB,MAJkB,aAAd9F,EAAK+S,OACP1G,EAAS+G,IAAMpT,EAAKoT,KAAO,MAC3B/G,EAAS,cAAgBrM,EAAK,eAAiB,OAE1CqM,CAAQ,EE2JPgH,CAAY5E,IAClB,CAACA,IAEHnU,QAAQuE,IAAIwN,KAGZ3M,EAAAA,EAAAA,YAAU,KACJ8S,GAAatY,QAAU,IACzBI,QAAQuE,IAAI,kBAAmB2T,IAC/B3B,EAAa2B,IACbX,EAAoB5H,KAAKqJ,MAAMrJ,KAAKC,UAAUsI,MAC9C7B,GAAawB,GAAYA,EAAU,IACrC,GACC,CAACK,MAEJ9S,EAAAA,EAAAA,YAAU,KACR+R,IAAyBpF,GAAS,GACjC,CAACA,KAGJ,MAAMzP,IAAUf,EAAAA,EAAAA,UAAQ,IF3HjB,CACL,CAAE4F,YAAa,QAASuN,OAAQ,WE0HY,IAExCM,IAAezT,EAAAA,EAAAA,UAAQ,IAAMkT,GAAe,IAmDlDzU,QAAQuE,IAAI,eAAgB0Q,GAY5B,OACE3W,EAAAA,EAAAA,MAAAD,EAAAA,SAAA,CAAAP,SAAA,CAGGkZ,IAAgBpZ,EAAAA,EAAAA,KAAC4W,EAAAA,EAAM,KAExB5W,EAAAA,EAAAA,KAACqb,EAAAA,EAAiB,CAChBvb,KAAMwY,EACNhW,OAAQA,IAAMiW,GAAqB,GACnCjV,UAAWoG,UACT6O,GAAqB,QAnOL7O,WACtB,MAAM4R,QAAyBlO,KAChB0E,EAAAA,EAAAA,GAAA,CACb,eAAgB,oBACbwJ,GAGLlZ,QAAQuE,IAAI,qCAEZ,MAAM4U,EAAiB3B,EAAkB5W,KAAKoF,GAAQA,EAAIoS,QACpDgB,EAAgBD,EAAevY,KAAK5B,IAAK,CAAQA,YAEjDqa,EAAmB/C,EAAU/N,QAChCvC,IAASmT,EAAe9W,SAAS2D,EAAIoS,SAGpCiB,IACF9C,EAAa8C,GACbhD,GAAawB,GAAYA,EAAU,KAGrClB,GAAe2C,GAAqB,IAC/BA,KACAF,KAGLrD,EAA6B,+BAA+B,EA0MhDwD,EAAiB,KAKzBlI,IAAcG,IAAYsF,IAC1BlZ,EAAAA,EAAAA,KAAA,OACEY,MAAO,CACLE,OAAQ,OACR8a,QAAS,OACTC,cAAe,SACfC,eAAgB,gBAChBC,SAAU,YACV7b,UAEFF,EAAAA,EAAAA,KAACgc,EAAAA,EAAoB,MAKxBvI,IACC/S,EAAAA,EAAAA,MAAAD,EAAAA,SAAA,CAAAP,SAAA,CAEG0T,IAAW5T,EAAAA,EAAAA,KAAC4W,EAAAA,EAAM,KACnB5W,EAAAA,EAAAA,KAAA,OAAKD,UAAU,qCAAoCG,UACjDQ,EAAAA,EAAAA,MAAA,OAAKX,UAAU,UAASG,SAAA,EACtBF,EAAAA,EAAAA,KAAA,OAAKD,UAAU,YAAWG,UACxBF,EAAAA,EAAAA,KAACW,EAAAA,EAAK,CACJI,IAAI,+DACJC,IAAI,YACJjB,UAAU,YACVqD,QAvGQ6Y,KACtBnH,IAEApG,GAASwN,EAAAA,EAAAA,KAAa,IACtBxN,GACEwF,EAAAA,EAAAA,IAAqB,CACnBC,SAAU,CAAC,EACXgI,cAAe,GACfC,SAAU,GACV5F,mBAAoB,MAGxB9H,IAaAiK,EAAa,IACbY,GAAuB,EAAM,MAiFlBpF,KACCnU,EAAAA,EAAAA,KAACqc,EAAAA,EAAmB,CAClBtV,KAAMoN,GACNmI,WAAW,yBAOlBpD,GACClZ,EAAAA,EAAAA,KAAA,OAAKD,UAAU,yBAAwBG,UACrCF,EAAAA,EAAAA,KAAC4W,EAAAA,EAAM,OAGT5W,EAAAA,EAAAA,KAAAS,EAAAA,SAAA,CAAAP,UACEQ,EAAAA,EAAAA,MAAA,OAAKX,UAAU,cAAaG,SAAA,EAC1BF,EAAAA,EAAAA,KAACuc,EAAyB,CACxBpF,WAAYwD,GACZvD,aAAcA,GACdnQ,OAAQA,EACR8P,WA7EIyF,CAACC,EAAgB3M,KACnC,MAAM9F,EAAWyS,EAAezZ,KAAKqN,IAAKyB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACvCzB,GAAK,IACRqM,aAAc5M,EACd6M,UAAW,UAGbva,QAAQuE,IAAI,kBAAmBqD,EAAS,EAuExBgN,WA1PMjQ,IACpB3E,QAAQuE,IAAI,mCAAoCI,EAAK,EA0PvCkQ,OAtSGvN,UACjBtH,QAAQuE,IAAI,sCAAuC+R,EAAU,EAsS/CxB,SApSKxN,UACnB6O,GAAqB,GACrBnW,QAAQuE,IAAI,uDAAuD,EAmSrDO,MAAOA,GACPmB,KAAMA,GACNgP,WAAYA,EACZC,SAzGKsF,KACnBjE,EAAa5G,KAAKqJ,MAAMrJ,KAAKC,UAAU0H,KACvCf,EAAae,GACbnC,GAAc,GAEdkC,GAAgB,GAEH,kBAATpR,IACF4Q,GAAuB4D,GACrBA,EAAK7Z,KAAK8E,IAAIgK,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACThK,GAAI,IACPgV,WAAYhV,EAAKgV,WAAW9Z,KAAKqN,IAAKyB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjCzB,GAAK,IACR0M,WAAOC,WAIf,EAyFczF,cAAeA,KAEjBvX,EAAAA,EAAAA,KAACid,EAAAA,EAAa,CAEZlW,KAAM2R,EACNhU,QAASA,GAET4X,WAAW,2BAJN9D,aAWhB,EChYP,IAAI0E,EAAO,KAuFI,SAAS,IAGtB,GAAI5P,OAAOC,OAAQ,CAGjB,IAAI4P,GAAe,EAEnB7P,OAAOC,OAAOkI,SAAS,UAAU,KAC3B0H,EACF/a,QAAQC,KACN,+EAIJ8a,GAAe,EArGrB,WAAkB,IAADC,EAAAC,EACfC,UAAU,CAAC,+BAAgCC,IACzCjQ,OAAOiQ,YAAcA,CAAW,IAIlC,IAAIC,GACW,QAAbJ,EAAA9P,OAAOC,cAAM,IAAA6P,GAAM,QAANC,EAAbD,EAAe1R,YAAI,IAAA2R,OAAN,EAAbA,EAAqBlI,cAAc,WACnCD,SAASuI,eAAe,QAGrBD,IACHA,EAActI,SAASwI,cAAc,OACrCF,EAAYvb,GAAK,OACbqL,OAAOC,QAAUD,OAAOC,OAAO7B,KACjC4B,OAAOC,OAAO7B,KAAKiS,YAAYH,GAG/BtI,SAASxJ,KAAKiS,YAAYH,IAOzBN,IAEHA,EAAOU,EAAAA,WAAoBJ,IAK7BN,EAAKW,QACHnd,EAAAA,EAAAA,MAACod,EAAAA,GAAQ,CAACzH,MAAOA,EAAAA,EAAMnW,SAAA,EACrBF,EAAAA,EAAAA,KAACsV,EAAe,KAChBtV,EAAAA,EAAAA,KAACkY,EAAe,KAChBlY,EAAAA,EAAAA,KAAC+d,EAAAA,GAAc,OAMrB,CAiEMC,GAAO,GAEX,MACE5b,QAAQ2B,MACN,sEAGN,EArEA,WA2BE,GAAIuJ,OAAO7H,QAAU6H,OAAO7H,OAAOyP,SAAU,CAC3C,IAAI+I,EAAiB3Q,OAAO7H,OAAOyP,SAASwI,cAAc,UAC1DO,EAAeC,YA1BE,y1BA2BjB5Q,OAAO7H,OAAOyP,SAASxJ,KAAKiS,YAAYM,EAE1C,MACE7b,QAAQC,KAAK,qFAEjB,CAGA8b,E","sources":["components/Alert/ReusableAlert.jsx","components/DragAndDrop/DragAndDrop.jsx","components/Modal/customModal.jsx","components/Modals/ConfirmationModal.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Popup/Popup.jsx","services/api/companion/updateClasses.js","services/api/companion/processPlantsService.js","services/api/companion/fetchCsrfService.js","hooks/useCompanionWidget.js","services/api/companion/CADetailService.js","hooks/useCompanionDropableArea.js","pages/companionWidget/WidgetLifecycle.jsx","pages/companionWidget/comapnaiondataHelpers.js","pages/companionWidget/companionWidgetToolbarNativeCta.jsx","pages/companionWidget/CompanionWidget.jsx","pages/companionWidget/companionIndex.js"],"sourcesContent":["import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React, { useEffect } from \"react\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = ({ onDrop }) => {\r\n  const { handleDrop: defaultHandleDrop } = useDroppableArea();\r\n  const { performSearch } = useInterComSearch();\r\n  const handleDrop = onDrop || defaultHandleDrop;\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      // console.log(\"Selected objects:\", selectedObjects);\r\n      // console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ReusableAlert from \"../../components/Alert/ReusableAlert\";\r\nimport \"./ConfirmationModal.css\";\r\n\r\nconst ConfirmationModal = ({ show, onHide, onConfirm }) => {\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Confirm Submission\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Submit\",\r\n          variant: \"success\",\r\n          onClick: onConfirm,\r\n        },\r\n      ]}\r\n    >\r\n      <div className=\"confirmation-modal-content\">\r\n        <h4 className=\"confirmation-title\">\r\n          Are you sure you want to submit? This action cannot be undone.\r\n        </h4>\r\n\r\n        <ReusableAlert\r\n          variant=\"info\"\r\n          className=\"mb-3\"\r\n          message={\r\n            <span className=\"info-message-container\">\r\n              <span className=\"info-icon\">i</span>\r\n\r\n              <span className=\"info-text\">\r\n                Once submitted, your data will be processed by the system. You\r\n                will receive a confirmation once its complete. Large uploads may\r\n                take a few minutes.\r\n              </span>\r\n            </span>\r\n          }\r\n        />\r\n      </div>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport { handleExportExcel } from \"../../utils/helpers\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\nimport CustomButton from \"../Button/Button\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const handleExportErrors = () => {\r\n    // Transform processedErrors into a format suitable for Excel\r\n    const exportData = processedErrors.map((error) => ({\r\n      \"Row Number\": error.rowNumber,\r\n      \"Column Names\": error.columns.join(\", \"),\r\n      \"Error Description\": error.errors.join(\"; \"),\r\n    }));\r\n\r\n    // Call the handleExportExcel function with the transformed data\r\n    handleExportExcel(exportData, \"validation-errors.xlsx\");\r\n  };\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <div className=\"error-header-container\">\r\n        <div></div>\r\n        <CustomButton\r\n          variant=\"success\"\r\n          onClick={handleExportErrors}\r\n          className=\"mb-3\"\r\n          text=\"Export to Excel\"\r\n          size=\"lg\"\r\n        />\r\n      </div>\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import { callEnoviaWebService, loadWAFData } from \"../../../utils/helpers\"\r\nimport axios from \"axios\";\r\n\r\nexport const updateClasses = async (\r\n    headers,\r\n    allPlants,\r\n    objectId,\r\n    state,\r\n    type\r\n  ) => {\r\n    try {\r\n      const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n      const sLatestID = await getLatestRevision(objectId, type, headers);\r\n      console.log(\"Hello getLatestRevision is Called\", sLatestID)\r\n  \r\n      if (sLatestID !== \"\") {\r\n        const classificationUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${sLatestID}?$mask=dslib:ClassificationAttributesMask`;\r\n  \r\n        const ClassResponse = await callEnoviaWebService(\"GET\", classificationUrl, \"\", headers);\r\n  \r\n        if (ClassResponse.status && ClassResponse.output) {\r\n          const classificationMembers =\r\n            ClassResponse.output.member[0]?.ClassificationAttributes?.member || [];\r\n  \r\n          // Step 1: Filter and map results\r\n          const results = classificationMembers\r\n                .filter(classItem =>\r\n                    classItem.Attributes.some(\r\n                    attr => attr.name === \"PlantAssignmentClass\" && attr.value === true\r\n                    )\r\n                )\r\n                .map(classItem => {\r\n                    // Update Seq attribute if found\r\n                    const updatedAttributes = classItem.Attributes.map(attr => {\r\n                        if (attr.name === \"Seq\") {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: String(Number(attr.value) + 1),\r\n                          };\r\n                        } else if (attr.name === \"PlantStatus\") {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: \"Pending\",\r\n                          };\r\n                        } else if(attr.name === \"AddSeq\" || attr.name === \"PlantAssignmentClass\"){\r\n                          return {\r\n                            name: attr.name,\r\n                            value: attr.value,\r\n                          };\r\n                        }else {\r\n                          return {\r\n                            name: attr.name,\r\n                            value: \"\",\r\n                          };\r\n                        }\r\n                      });\r\n\r\n                    return {\r\n                    ClassID: classItem.ClassID,\r\n                    Attributes: updatedAttributes,\r\n                    };\r\n                });\r\n  \r\n          console.log(\"Matching ClassID and Seq:\", results);\r\n  \r\n          // Step 2: If results exist, classify and then update\r\n          if (results.length > 0) {\r\n            const classifyUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass`;\r\n  \r\n            const classifyBody = {\r\n              id: objectId,\r\n              type: type,\r\n              classes: results.map(item => item.ClassID),\r\n              mode: \"classifyParent\",\r\n            };\r\n  \r\n            try {\r\n              const classifyResponse = await fetchData(\"POST\", classifyUrl, classifyBody);\r\n              console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n  \r\n              // Proceed with second call only after classify completes\r\n              const referencedObject = {\r\n                source: ENOVIA_BASE_URL,\r\n                type: \"dslib:CategorizationClassifiedItem\",\r\n                identifier: objectId,\r\n                relativePath: `resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}`,\r\n              };\r\n  \r\n              const categorizationAttributes = results.map(res => ({\r\n                classId: res.ClassID,\r\n                attributes: res.Attributes.reduce((acc, attr) => {\r\n                  acc[attr.name] = attr.value;\r\n                  return acc;\r\n                }, {}),\r\n              }));\r\n  \r\n              const payload = [\r\n                {\r\n                  referencedObject,\r\n                  categorizationAttributes,\r\n                },\r\n              ];\r\n  \r\n              console.log(\"Prepared payload for second API call:\", JSON.stringify(payload));\r\n  \r\n              // Second API call\r\n              const secondUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${objectId}`;\r\n              const secondResponse = await fetchData(\"PATCH\", secondUrl, payload);\r\n  \r\n              console.log(\"Second API call response:\", JSON.stringify(secondResponse));\r\n              \r\n              return results;\r\n              // return {\r\n              //   success: true,\r\n              //   classifyResponse,\r\n              //   secondResponse,\r\n              // };\r\n  \r\n            } catch (error) {\r\n              console.error(\"Error during classify or second API call:\", error);\r\n              // return { success: false, error };\r\n              return [];\r\n            }\r\n          } else {\r\n            console.warn(\"No matching classifications found with Plant = True.\");\r\n            // return { success: false, message: \"No matching classes to classify.\" };\r\n            return [];\r\n          }\r\n        } else {\r\n          console.error(\"Invalid classification response from ENOVIA.\");\r\n          // return { success: false, message: \"Invalid classification data.\" };\r\n          return [];\r\n        }\r\n      } else {\r\n        console.warn(\"No latest revision ID found.\");\r\n        // return { success: false, message: \"No latest ID.\" };\r\n        return [];\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[updateClasses] Failed to process:\", error);\r\n      // return { success: false, error };\r\n      return [];\r\n    }\r\n  };\r\n  \r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    const revurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n    let ret = \"\";\r\n    try {\r\n      const relativePath =\r\n        type === \"Raw_Material\"\r\n          ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n          : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n  \r\n      const Body = {\r\n        data: [\r\n          {\r\n            id: identifier,\r\n            identifier: identifier,\r\n            type: type,\r\n            source: ENOVIA_BASE_URL,\r\n            relativePath: relativePath,\r\n          },\r\n        ],\r\n      };\r\n  \r\n      // Make the API call with the dynamically created body\r\n      const response = await callEnoviaWebService(\r\n        \"POST\",\r\n        revurl,\r\n        // JSON.stringify(Body),\r\n        Body,\r\n        headers\r\n      );\r\n  \r\n      // Check if the response contains status and output properties\r\n      if (response.status && response.output) {\r\n        // Loop through each result in the response and check for ancestors\r\n        \r\n\r\n        const versions = response.output.results[0].versions;\r\n        \r\n        for (const version of versions) {\r\n            if (version.identifier === identifier) {\r\n                console.log(\"Found matching version for ID:\", identifier);\r\n                if (Array.isArray(version.ancestors) && version.ancestors.length > 0) {\r\n                    ret = version.ancestors[0].id;\r\n                    console.log(\"Ancestor ID:\", ret);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n      } else {\r\n        console.error(\r\n          \"API response does not contain the expected 'status' and 'output'.\"\r\n        );\r\n        return ret;\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n      return ret;\r\n    }\r\n  }\r\n\r\n  export const fetchData = async (\r\n    method = \"GET\",\r\n    url,\r\n    body = null\r\n  \r\n    // headers = {}\r\n  ) => {\r\n    console.log(\"Fetching URL:\", url);\r\n    console.log(\"Method is:\");\r\n    console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n  \r\n    try {\r\n      const response = await axios({\r\n        url,\r\n        method,\r\n        // headers: {\r\n        //   ...headers,\r\n        //   \"Content-Type\": \"application/json\",\r\n        // },\r\n        data: body, // Include body only if provided\r\n      });\r\n  \r\n      console.log(\"Response received:\", response.data);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Request failed:\", error);\r\n      throw error; // Propagate the error to the caller\r\n    }\r\n  };\r\n","import { callEnoviaWebService } from \"../../../utils/helpers\";\r\nconst ENOVIA_BASE_URL = \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia\";\r\n\r\nconst ClassDetails = [];\r\n/**\r\n * Generic helper to call Enovia Web Service\r\n * @param {string} method - HTTP method (GET, POST)\r\n * @param {string} url - Full URL for the API call\r\n * @param {string|object} body - Request body as string or object\r\n * @param {object} headers - Headers object\r\n * @returns {Promise<object>} - Parsed JSON response\r\n */\r\n// async function callEnoviaWebService(method, url, body, headers) {\r\n//   const options = {\r\n//     method,\r\n//     headers: {\r\n//       ...headers,\r\n//       \"Content-Type\": \"application/json\"\r\n//     }\r\n//   };\r\n \r\n//   if (body) {\r\n//     options.body = typeof body === \"string\" ? body : JSON.stringify(body);\r\n//   }\r\n \r\n//   const response = await fetch(url, options);\r\n//   if (!response.ok) {\r\n//     throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`);\r\n//   }\r\n//   return response.json();\r\n// }\r\n \r\n/**\r\n * Get Manufacturing Item identifiers from an engineering item ID\r\n * @param {object} headers\r\n * @param {string} engItemId\r\n * @returns {Promise<string[]>} - Array of manufacturing item identifiers\r\n */\r\nasync function getManufacturingItems(headers, engItemId) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/invoke/dsmfg:getMfgItemsFromEngItem`;\r\n  const body = [engItemId];\r\n \r\n  try {\r\n    const response = await callEnoviaWebService(\"POST\", url, body, headers);\r\n    if (response.output.totalItems > 0 && Array.isArray(response.output.member)) {\r\n        return response.output.member.map(item => item.identifier);\r\n    }\r\n    return [];\r\n  } catch (error) {\r\n    console.error(\"Error fetching manufacturing items:\", error);\r\n    return [];\r\n  }\r\n}\r\n \r\n/**\r\n * Get detailed info for a manufacturing item identifier\r\n * @param {object} headers\r\n * @param {string} identifier\r\n * @returns {Promise<object|null>} - Details with name, title, type, createdFrom, identifier\r\n */\r\nasync function getMfgItemDetails(headers, identifier) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}?$mask=dsmfg:MfgItemMask.Details`;\r\n \r\n  try {\r\n    const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(\"Response from Manufacturing Item URL:\", response);\r\n    console.log(\"Response totalItems:\", response.output.totalItems);\r\n    console.log(\"Response member:\", response.output.member);\r\n    if ( response &&\r\n        response.output &&\r\n        response.output.totalItems > 0 &&\r\n        Array.isArray(response.output.member) &&\r\n        response.output.member.length > 0) {\r\n      const item = response.output.member[0];\r\n      console.log(\"item:\", item);\r\n      return {\r\n        identifier: item.id,\r\n        name: item.name,\r\n        title: item.title,\r\n        type: item.type,\r\n        createdFrom: item.createdFrom || null\r\n      };\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error(`Error fetching details for identifier ${identifier}:`, error);\r\n    return null;\r\n  }\r\n}\r\n \r\n/**\r\n * Get plant class IDs assigned to a manufacturing item (filtering where PlantAssignmentClass is true)\r\n * @param {object} headers\r\n * @param {string} mfgIdentifier\r\n * @returns {Promise<string[]>} - Array of plant ClassIDs\r\n */\r\nasync function getPlantClassIDs(headers, mfgIdentifier) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${mfgIdentifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(\"Response from Plant Class IDs URL:\", response);\r\n    console.log(\"Response totalItems:\", response.output.totalItems);\r\n    if (\r\n      response.output.totalItems > 0 &&\r\n      response.output.member &&\r\n      response.output.member.length > 0 &&\r\n      response.output.member[0].ClassificationAttributes &&\r\n      Array.isArray(response.output.member[0].ClassificationAttributes.member)\r\n    ) {\r\n      const classMembers = response.output.member[0].ClassificationAttributes.member;\r\n      return classMembers\r\n        .filter(classItem => {\r\n          const plantAssignmentAttr = (classItem.Attributes || []).find(attr => attr.name === \"PlantAssignmentClass\");\r\n          return plantAssignmentAttr && plantAssignmentAttr.value === true;\r\n        })\r\n        .map(classItem => classItem.ClassID);\r\n    }\r\n    return [];\r\n  } catch (error) {\r\n    console.error(`Error fetching plant class IDs for ${mfgIdentifier}:`, error);\r\n    return [];\r\n  }\r\n}\r\n \r\n/**\r\n * Get Plant title by ClassID\r\n * @param {object} headers\r\n * @param {string} classId\r\n * @returns {Promise<string|null>} - Plant title or null if not found\r\n */\r\nasync function getPlantTitleByClassID(headers, classId) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Class/${classId}`;\r\n \r\n  try {\r\n    const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    if (\r\n      response.output.totalItems > 0 &&\r\n      response.output.member &&\r\n      response.output.member.length > 0\r\n    ) {\r\n      return response.output.member[0].title || null;\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error(`Error fetching plant title for class ID ${classId}:`, error);\r\n    return null;\r\n  }\r\n}\r\n \r\n/**\r\n * Get all assigned plant titles for a manufacturing item identifier\r\n * @param {object} headers\r\n * @param {string} mfgIdentifier\r\n * @returns {Promise<string[]>} - Array of plant titles\r\n */\r\nasync function getAssignedPlants(headers, mfgIdentifier) {\r\n  try {\r\n    const classIDs = await getPlantClassIDs(headers, mfgIdentifier);\r\n    if (classIDs.length === 0) return [];\r\n \r\n    const plantTitles = [];\r\n    for (const classId of classIDs) {\r\n        const existing = ClassDetails.find(item => item.classid === classId);\r\n        \r\n        if (existing) {\r\n            // If classId is already in ClassDetails, push its title to plantTitles\r\n            plantTitles.push(existing.title);\r\n        } else {\r\n            // If not, fetch title, then push to both ClassDetails and plantTitles\r\n            const title = await getPlantTitleByClassID(headers, classId);\r\n            if (title) {\r\n            ClassDetails.push({ classid: classId, title });\r\n            plantTitles.push(title);\r\n            }\r\n        }\r\n        }\r\n    return plantTitles;\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned plants for ${mfgIdentifier}:`, error);\r\n    return [];\r\n  }\r\n}\r\n \r\n/**\r\n * Expand children manufacturing items for a given identifier\r\n * Exclude those of type \"DELFmiFunctionIdentifiedInstance\"\r\n * Add assigned plants info for each child\r\n * @param {object} headers\r\n * @param {string} identifier\r\n * @returns {Promise<object[]>} - Array of child objects with id, name, type, title, and AssignedPlants\r\n */\r\nasync function getMFGChilders(headers, identifier) {\r\n    const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/expand`;\r\n    const body = {\r\n      expandDepth: 1,\r\n      withPath: true\r\n    };\r\n     \r\n \r\n    try {\r\n      const response = await callEnoviaWebService(\"POST\", url, body, headers);\r\n \r\n      if (\r\n        response.status &&\r\n        response.output &&\r\n        Array.isArray(response.output.member)\r\n      ) {\r\n        // Filter children (exclude DELFmiFunctionIdentifiedInstance)\r\n        const children = response.output.member.filter(\r\n          item => item.type && item.type !== \"DELFmiFunctionIdentifiedInstance\"\r\n        );\r\n \r\n        // Enrich each child with AssignedPlants\r\n        const enrichedChildren = await Promise.all(\r\n          children.map(async child => {\r\n            const assignedPlants = await getAssignedPlants(headers, child.id);\r\n            return {\r\n              id: child.id,\r\n              type: child.type,\r\n              name: child.name,\r\n              title: child.title || null,\r\n              AssignedPlants: assignedPlants\r\n            };\r\n          })\r\n        );\r\n \r\n        return enrichedChildren;\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error(`Error fetching children for identifier ${identifier}:`, error);\r\n      return [];\r\n    }\r\n  }\r\n \r\n \r\n/**\r\n * Main method that prepares the output data\r\n * @param {object} headers\r\n * @param {string} engItemId - Engineering Item ID\r\n * @param {string} droppedMfgID - Manufacturing Item ID to flag as currentObject\r\n * @returns {Promise<object[]>} - Array of objects with manufacturing details and assigned plants and children\r\n */\r\nexport async function prepareDataOutput(headers, droppedMfgID, engItemId) {\r\n  try {\r\n    const identifiers = await getManufacturingItems(headers, engItemId);\r\n    console.log(\"Manufacturing Identifiers:\", identifiers);\r\n    if (identifiers.length === 0) return [];\r\n \r\n    const detailsArray = await Promise.all(\r\n      identifiers.map(id => getMfgItemDetails(headers, id))\r\n    );\r\n\r\n    console.log(\"Manufacturing Details:\", detailsArray);\r\n \r\n    const items = detailsArray.filter(item => item !== null);\r\n \r\n    // Determine which items are parents (no createdFrom reference from others)\r\n    const createdFromSet = new Set(\r\n      items\r\n        .map(item => item.createdFrom)\r\n        .filter(Boolean)\r\n        .map(cf => cf.split(\" \")[0])\r\n    );\r\n\r\n    console.log(\"Created From Set:\", createdFromSet);\r\n \r\n    const result = [];\r\n \r\n    for (const item of items) {\r\n      const isParent = createdFromSet.has(item.name);\r\n      const currentObject = item.identifier === droppedMfgID;\r\n      console.log(`Processing item: ${item.name}, isParent: ${isParent}, currentObject: ${currentObject}`);\r\n \r\n      // Get assigned plants for each manufacturing item\r\n      const assignedPlants = await getAssignedPlants(headers, item.identifier);\r\n      console.log(`Assigned Plants for Hello:`, assignedPlants);\r\n \r\n      // Expand children if parent or currentObject\r\n      let children = [];\r\n      if (isParent || currentObject) {\r\n        children = await getMFGChilders(headers, item.identifier);\r\n      }\r\n \r\n      result.push({\r\n        identifier: item.identifier,\r\n        name: item.name,\r\n        title: item.title,\r\n        type: item.type,\r\n        isParent,\r\n        currentObject,\r\n        AssignedPlants: assignedPlants,\r\n        children\r\n      });\r\n    }\r\n\r\n    console.log(\"Prepared Data Output:\", result);\r\n \r\n    return result;\r\n  } catch (error) {\r\n    console.error(\"Error in prepareDataOutput:\", error);\r\n    return [];\r\n  }\r\n}\r\n \r\n \r\n//Plants for popup\r\nexport async function preparePlantLists(preparedDataOutput, allPlants) {\r\n    // 1. Get plants assigned to the engineering item\r\n    const engItemPlants = allPlants.map(item => item.title);\r\n    console.log(\"Engineering Item Plants:\", engItemPlants);\r\n \r\n    // 2. Find the current MFG item (where currentObject === true)\r\n    const currentMfgItem = preparedDataOutput.find(mfg => mfg.currentObject === true);\r\n \r\n    if (!currentMfgItem) {\r\n      console.warn(\"Current MFG item not found in prepared data output.\");\r\n      return {\r\n        AssignedPlants: [],\r\n        AvailablePlants: engItemPlants\r\n      };\r\n    }\r\n \r\n    // Assigned plants of current MFG\r\n    const assignedPlants = currentMfgItem.AssignedPlants || [];\r\n \r\n    // 3. Collect plants assigned to all other MFG items except the parent MFG item\r\n    const otherPlants = [];\r\n \r\n    preparedDataOutput.forEach(mfgItem => {\r\n      if (!mfgItem.isParent) {  // exclude parent MFG plants\r\n        const plants = mfgItem.AssignedPlants || [];\r\n        plants.forEach(plant => {\r\n          if (!otherPlants.includes(plant)) {\r\n            otherPlants.push(plant);\r\n          }\r\n        });\r\n      }\r\n    });\r\n \r\n    // 4. Calculate available plants: engItemPlants - otherPlants\r\n    const availablePlants = engItemPlants.filter(plant => !otherPlants.includes(plant));\r\n\r\n    console.log(\"Assigned Plants:\", assignedPlants);\r\n    console.log(\"Available Plants:\", availablePlants);\r\n\r\n\r\n    return {\r\n      AssignedPlants: assignedPlants,\r\n      AvailablePlants: availablePlants\r\n    };\r\n  }","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/companion/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/companion/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/companion/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/companion/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/companion/assignedPlantService\";\r\nimport {updateClasses} from \"../services/api/companion/updateClasses\";\r\nimport {prepareDataOutput, preparePlantLists} from \"../services/api/companion/processPlantsService\";\r\n\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setCAName,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setCAData,\r\n  setCompanionObjectData,\r\n  setCANameForCompanion,\r\n  setPreparedDataOuput\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/companion/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService } from \"../utils/helpers\";\r\nconst ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\nconst useCompanionWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  \r\n\r\n  let email = window.widget.getValue(\"email\");\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  const handleCompanion = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true)); // Start loading state\r\n\r\n      // Fetch CSRF headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      console.log(\"[UsePlantAssignment] Headers:\", headers);\r\n\r\n      let ItemDetails = [];\r\n\r\n      // Handle \"Change Action\" type separately\r\n      if (type === \"Change Action\") {\r\n        const CAAllPlantsData = async () => {\r\n          // Replace this with your actual API call\r\n          const allPlants = await getAllPlants(\r\n            [collabSpace],\r\n            headers,\r\n            objectId\r\n          ); // getAllPlants wants collabspace as an array.\r\n          console.log(\"Parallel API response:\", allPlants);\r\n          dispatch(setCAAllPlants(allPlants));\r\n          return allPlants;\r\n        };\r\n        let isMFGCA = false;\r\n        console.log(\"The object Type is Change Action\");\r\n        const fetchChangeActionData = async (allPlants) => {\r\n          const CAURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n          const response = await callEnoviaWebService(\r\n            \"GET\",\r\n            CAURL,\r\n            \"\",\r\n            headers\r\n          );\r\n          console.log(\"Response from Change Action URL:\", response);\r\n\r\n          if (response.status && response.output) {\r\n            const realizedChanges = response.output.realizedChanges.map(\r\n              (realizedChange) => realizedChange.where.identifier\r\n            );\r\n            const changeProcessingPromises =\r\n              response.output.proposedChanges.map(async (change) => {\r\n                let ItemId = change.where.identifier;\r\n                let ItemType = change.where.type;\r\n                if (\r\n                  ItemType == \"Raw_Material\" ||\r\n                  ItemType == \"VPMReference\" ||\r\n                  ItemType == \"CreateAssembly\" ||\r\n                  ItemType == \"Provide\" ||\r\n                  ItemType == \"CreateMaterial\"\r\n                ) {\r\n                if (change.target === \"NewVersion\") {\r\n                  const sLatestID = await getLatestRevision(\r\n                    ItemId,\r\n                    ItemType,\r\n                    headers\r\n                  );\r\n                  if (realizedChanges.includes(sLatestID)) {\r\n                    ItemId = sLatestID;\r\n                  }\r\n                }\r\n                if (\r\n                  ItemType !== \"Raw_Material\" &&\r\n                  ItemType !== \"VPMReference\"\r\n                ) {\r\n                  isMFGCA = true;\r\n                  const mfgDetails = await getScopedItms(ItemId, headers);\r\n                  console.log(\"MFG Details are:\", mfgDetails);\r\n                  ItemId = mfgDetails.identifier;\r\n                  ItemType = mfgDetails.type;\r\n                }\r\n                if (ItemId !== undefined && ItemType !== undefined) {\r\n                  try {\r\n                    // const [ItemPlants, Iteminfo] = await Promise.all([\r\n                    //   getAssignedClasses(ItemId, headers,allPlants),\r\n                    //   getItemDetails(ItemId, ItemType, headers),\r\n                    // ]);\r\n                    const Iteminfo = await getItemDetails(ItemId, ItemType, headers);\r\n                    const state = Iteminfo?.member?.[0]?.state;\r\n                    const ItemObjectdetails = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n                    const ItemPlants = ItemObjectdetails.ItemPlants;\r\n                    const hasNoPlants = ItemObjectdetails.hasNoPlants;\r\n                    console.log(\"Item Plants are:\", ItemPlants);\r\n                    console.log(\"Has No Plants are:\", hasNoPlants);\r\n                    console.log(\"ItemObjectdetails:\", ItemObjectdetails )\r\n\r\n                    //  const ItemPlants = await getAssignedClasses(ItemId, headers, allPlants, state,type);\r\n\r\n                    ItemDetails.push({\r\n                      ItemId,\r\n                      ItemType,\r\n                      ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n                      ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n                      ItemMBOM:  Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]?.EMR_hasMBOM || \"N/A\",\r\n                      ItemPlants,\r\n                      hasNoPlants\r\n                    });\r\n                  } catch (err) {\r\n                    console.error(\r\n                      `Error processing change for item ${ItemId}:`,\r\n                      err\r\n                    );\r\n                  }\r\n                }\r\n              }\r\n              });\r\n\r\n            await Promise.all(changeProcessingPromises);\r\n          } else {\r\n            console.error(\"Invalid response structure or no proposed changes.\");\r\n          }\r\n        };\r\n        \r\n\r\n        // Fetch allPlants first, then pass it to fetchChangeActionData\r\n        // const allPlants = await CAAllPlantsData();\r\n        // await fetchChangeActionData(allPlants);\r\n\r\n        // dispatch(setParentDetailsLoading(false));\r\n        // dispatch(setCAItemDetails(ItemDetails));\r\n        // dispatch(setIsMFGCA(isMFGCA));\r\n        // dispatch(setCAHeaders(headers));\r\n      } else {\r\n        // // Step 1: Fetch user group collaboration spaces\r\n        // const userGroupCollab = await getUserGroupCollab(\r\n        //   headers,\r\n        //   objectId,\r\n        //   email\r\n        // );\r\n        // console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        // let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n        // console.log(\r\n        //   \"[Use Plant Assignment] All CollabSpaces:\",\r\n        //   allCollabSpaces\r\n        // );\r\n\r\n        // Step 2: Fetch all plants if collab spaces exist\r\n        // let allPlants = [];\r\n        // if (allCollabSpaces.length > 0) {\r\n        //   allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n        //   console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n        // } else {\r\n        //   console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n        // }\r\n\r\n        //here we have to get from ScopeLined EngineeringItem. for companion widget---->\r\n        let allPlants = [];\r\n        const scopeLinekdData = await getScopedItms(objectId,headers);\r\n        console.log(\"[Use Companion] Scope Linked Data:\", scopeLinekdData);\r\n        if(scopeLinekdData.identifier){\r\n          allPlants = await getPlantClasses(headers, scopeLinekdData.identifier);\r\n\r\n          const prepareData = await prepareDataOutput(headers, objectId, scopeLinekdData.identifier);\r\n\r\n          console.log(\"[Use Companion] Prepare Data Output:\", prepareData);\r\n          // Store the prepared product/plant hierarchy in Redux so it can be accessed by any component that needs the product children structure\r\n          dispatch(setPreparedDataOuput(prepareData)); //\r\n          \r\n          const plantLists = await preparePlantLists(prepareData,allPlants);\r\n          console.log(\"[Use Companion] Plant Lists:\", plantLists);\r\n          // Store AssignedPlants and AvailablePlants in Redux for use in table and popup\r\n          dispatch(setCompanionObjectData({\r\n            initialAssignedPlants: plantLists.AssignedPlants,\r\n            uniquePlants: plantLists.AvailablePlants\r\n          }));\r\n        }\r\n\r\n        \r\n\r\n        // // Step 3: Fetch assigned plants if there are any\r\n        // if (allPlants.length > 0) {\r\n        //   const plants = await fetchAssignedPlants(\r\n        //     allPlants,\r\n        //     headers,\r\n        //     objectId,\r\n        //     state,\r\n        //     type\r\n        //   );\r\n        //   console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n        //   if (plants.success) {\r\n        //     dispatch(setPlantObjectData(plants.data.plantData));\r\n        //     console.log(\"[Use Plant Assignment] Plant Object Data:\", plants.data.plantData);\r\n        //     dispatch(setHeaders(headers));\r\n        //   } else {\r\n        //     console.error(\"Failed to fetch plant data.\");\r\n        //   }\r\n        // } else {\r\n        //   console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n        // }\r\n\r\n        // // Step 4: Fetch Product Children based on type\r\n        // let getProductChildren = {};\r\n        // // TODO : Need Update for companion widget\r\n\r\n        //   const typeList = [\"CreateKit\", \r\n        //     \"CreateAssembly\", \r\n        //     \"CreateMaterial\", \r\n        //     \"Provide\", \r\n        //     \"ProcessContinuousProvide\",\r\n        //     \"Raw_Material\"];\r\n        // if (typeList.includes(type)) {\r\n        //   getProductChildren = { success: true, data: [] };\r\n        // } else {\r\n        //   getProductChildren = await fetchProductChildren(\r\n        //     headers,\r\n        //     objectId,\r\n        //     type\r\n        //   );\r\n        // }\r\n\r\n        // console.log(\"Type After:\", type);\r\n        // console.log(\r\n        //   \"[Use Plant Assignment] Product Children:\",\r\n        //   getProductChildren\r\n        // );\r\n\r\n        // if (getProductChildren.success) {\r\n        //   dispatch(setProductChildren(getProductChildren.data));\r\n        // }\r\n\r\n        // Step 5: Fetch Change Action details\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n        if (getCaDetails.success) {\r\n          dispatch(setCANameForCompanion(getCaDetails.data));\r\n          // dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n          // dispatch(setCAData(getCaDetails.CAData));\r\n        }\r\n\r\n        console.log(\"[Plant Assignment] All services executed successfully.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      showErrorToast(\"An error occurred while fetching plant assignment data.\");\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading is disabled in all cases\r\n    }\r\n  };\r\n\r\n  return { handleCompanion };\r\n};\r\n\r\nexport default useCompanionWidget;\r\n\r\n// Function to call the relevant URL for a ClassifiedItem using a single identifier\r\nasync function getAssignedClasses(identifier, headers,allPlants,state, type) {\r\n  const plantIdData = [];\r\n  let hasNoClass = false\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n    \r\n    let ClassExtensions = itemResponse.output.member[0]?.ClassificationAttributes?.member || [];\r\n\r\n    ClassExtensions = ClassExtensions.filter(ext => {\r\n      const plantAssignmentAttr = ext.Attributes.find(a => a.name === \"PlantAssignmentClass\");\r\n      const allPlantsRemovedAttr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return plantAssignmentAttr?.value === true || allPlantsRemovedAttr?.value === true;\r\n    });\r\n \r\n    \r\n    if (ClassExtensions.length===0){\r\n      ClassExtensions =  await updateClasses(\r\n        headers,\r\n        allPlants,\r\n        identifier,\r\n        state,\r\n        type\r\n        );\r\n    }\r\n\r\n    hasNoClass= ClassExtensions.some(ext => {\r\n      const attr = ext.Attributes.find(a => a.name === \"AllPlantsRemoved\");\r\n      return attr?.value === true;\r\n    });\r\n\r\n    if (\r\n      ClassExtensions.length>0\r\n    ) {\r\n      ClassExtensions.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n          let isPlantClass = false;\r\n          let flowDownCA = \"\";\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantAssignmentClass\")) {\r\n              isPlantClass = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"PlantStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"FlowDownCA\")) {\r\n              flowDownCA = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (isPlantClass) {\r\n            plantName =  allPlants.find(p => p.id === classId)?.title\r\n            if(plantName)\r\n              {\r\n                plantIdData.push({\r\n                  PlantName: plantName,\r\n                  PlantID: classId,\r\n                  PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n                  PlantFlowDownCA : flowDownCA, // \"MCO-001-MVO\" \r\n                });\r\n              }\r\n        }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return {\r\n    \"ItemPlants\" : plantIdData, \r\n    \"hasNoPlants\": hasNoClass\r\n  }; // Both return as Object\r\n}\r\n\r\nasync function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/${identifier}?mask=dsmveng:EngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: ENOVIA_BASE_URL,\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      // JSON.stringify(Body),\r\n      Body,\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      const versions = response.output.results[0]?.versions || [];\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of versions) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nasync function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nasync function getPlantClasses(headers, objectId) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:CategorizationClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n \r\n    if (itemResponse.status && itemResponse.output) {\r\n      const classExtensions = itemResponse.output.member[0].ClassificationAttributes?.member || [];\r\n \r\n      const result = [];\r\n \r\n      for (const classItem of classExtensions) {\r\n        const id = classItem.ClassID;\r\n        const attributes = classItem.Attributes || [];\r\n \r\n        const plantAssignmentClass = attributes.find(attr => attr.name === 'PlantAssignmentClass')?.value;\r\n \r\n        if (plantAssignmentClass) {\r\n          const title = await getClassTitleById(headers, id);\r\n          result.push({\r\n            id,\r\n            title\r\n          });\r\n        }\r\n      }\r\n \r\n      return result;\r\n    } else {\r\n      console.log(`No valid response for object ID ${objectId}`);\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${objectId}:`, error);\r\n    return [];\r\n  }\r\n}\r\n \r\nasync function getClassTitleById(headers, classId) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Class/${classId}`;\r\n \r\n  try {\r\n    const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n \r\n    if (response.status && response.output && response.output.member && response.output.member.length > 0) {\r\n      const classInfo = response.output.member[0];\r\n      return classInfo.title || null;\r\n    } else {\r\n      console.log(`No class found for classId ${classId}`);\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching class title for classId ${classId}:`, error);\r\n    return null;\r\n  }\r\n}\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  let CADetails = {\"CAName\":\"\", \"CAStatus\":\"\"};\r\n  const patternsToCheck = ['caproposedwhere_from', 'carealizedwhere_from'];\r\n  const URLCADetails =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/setPreferences`;\r\n \r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\", \"carealizedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\",\"ds6w:label\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/getEcosystem`;\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n \r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n \r\n    const WAFData = await loadWAFData();\r\n \r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n \r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n \r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n \r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      for (const pattern of patternsToCheck) {\r\n        if (response2.objectsByPatterns[pattern]) {\r\n          await Promise.all(\r\n            response2.objectsByPatterns[pattern].map(async (itm) => {\r\n              const status = itm[\"ds6w:status\"].slice(14);\r\n              const CAName = itm[\"ds6w:label\"];\r\n     \r\n              if (status !== \"Complete\") {\r\n                const url3 = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,realizedChanges,flowDown`;\r\n     \r\n                const response3 = await new Promise((resolve, reject) => {\r\n                  WAFData.authenticatedRequest(url3, {\r\n                    method: \"GET\",\r\n                    headers,\r\n                    type: \"json\",\r\n                    onComplete: resolve,\r\n                    onFailure: reject,\r\n                  });\r\n                });\r\n                console.log(\"response3 Data will appear:\", response3);\r\n     \r\n                if (pattern === 'caproposedwhere_from') {\r\n                  if (Array.isArray(response3.proposedChanges)) {\r\n                    response3.proposedChanges.forEach((proposedChange) => {\r\n                      proposedChangesArray.push({\r\n                        identifier: proposedChange.where.identifier,\r\n                        action: proposedChange.whats[0].what,\r\n                      });\r\n                    });\r\n                  }\r\n                } else {\r\n                  if (Array.isArray(response3.realizedChanges)) {\r\n                      response3.realizedChanges.forEach((realizedChange) => {\r\n                        proposedChangesArray.push({\r\n                          identifier: realizedChange.where.identifier,\r\n                          action: realizedChange.operations[0],\r\n                        });\r\n                      });\r\n                    }\r\n                }\r\n     \r\n                  if (state.toLowerCase() === \"released\") {\r\n                    resObejct = proposedChangesArray.some(\r\n                      (change) =>\r\n                        change.identifier === objectID &&\r\n                        change.action === \"Modify\"\r\n                    );\r\n                  } else {\r\n                    resObejct = true;\r\n                  }\r\n                if (resObejct) {\r\n                  CADetails[\"CAName\"] = CAName;\r\n                  CADetails[\"CAStatus\"] = status;\r\n                }\r\n              }\r\n            })\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n \r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      CAData : CADetails,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n \r\n    throw error;\r\n  }\r\n};","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport useCompanionWidget from \"./useCompanionWidget\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n  MSG_INVALID_MFG_TYPES,\r\n} from \"../utils/toastMessages\";\r\n \r\nconst useCompanionDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleCompanion } = useCompanionWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n \r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n        // const objectDetailsResult = {\r\n        //   success: \"true\",\r\n        //   data: {\r\n        //     cardData: {\r\n        //       \"Title\": \"PRD90100\",\r\n        //       \"Type\": \"Physical Product\",\r\n        //       \"Maturity State\": \"In Work\",\r\n        //       \"Owner\": \"Sudarshan Sambamurthy\",\r\n        //       \"Collaborative Space\": \"Micro Motion\",\r\n        //       \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n        //       \"Description\": \"\",\r\n        //       \"Dropped Revision\": \"AA\",\r\n        //       \"Dropped Revision ID\": \"6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Latest Released Revision\": \"\",\r\n        //       \"Latest Released Revision ID\": \"\",\r\n        //       \"EIN\": \"PRD90100\",\r\n        //       \"CAD Format\": \"\",\r\n        //       \"imageURL\": \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\",\r\n        //       \"relativePath\": \"/resources/v1/modeler/dseng/dseng:EngItem/6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Name\": \"prd-OI000186152-00090100\",\r\n        //       \"organization\": \"BU-0000001\",\r\n        //       \"Latest Revision\": \"AA\",\r\n        //       \"MFGCA\": false\r\n        //   },\r\n        //   },\r\n        // };\r\n \r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n \r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n \r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n \r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n \r\n          dispatch(setIsDroppedAction(true));\r\n \r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handleCompanion(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleCompanion]\r\n  );\r\n \r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n \r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\r\n            // \"VPMReference\",\r\n            // \"Raw_Material\",\r\n            // \"Change Action\",\r\n            \"CreateKit\", \r\n            \"CreateAssembly\", \r\n            \"CreateMaterial\", \r\n            \"Provide\", \r\n            \"ProcessContinuousProvide\"\r\n          ]; //\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_MFG_TYPES);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n \r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n \r\nexport default useCompanionDropableArea;","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport useCompanionDropableArea from \"../../hooks/useCompanionDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useCompanionDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\nconst ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n  isMFGCA\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {plant.color === \"green\" && \" - Add\"}\r\n          {plant.color === \"red\" && (isMFGCA ? \" - Updated\" : \" - Removed\")}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      `${ENOVIA_BASE_URL}/snresources/images/icons/large/I_VPMNavProduct108x144.png`, // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData) => {\r\n\r\n  console.log(\"tableData in datahelpers\", tableData);\r\n \r\n  \r\n  if (!tableData) return [];\r\n\r\n  // 🌟 Start Mapping Data\r\n  let mappedData = tableData.map((data) => {\r\n  \r\n      \r\n       \r\n      return {\r\n        Plant: data || \"N/A\",\r\n        // Seq: data?.Seq || \"1\",\r\n        // Status: data?.PlantStatus || \"Pending\",\r\n        // \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        // \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        // Change: data?.Change || CAData.CAName ||\"N/A\",\r\n        // \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n        // \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        // \"ERP Status\": \"Active\" || \"N/A\",\r\n        // \"ERP Export\": \"Yes\" || \"N/A\",\r\n        // \"Lead Plant\": false,\r\n        // MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        // \"Sort Value\": \"\",\r\n      };\r\n  \r\n  });\r\n\r\n  // 🌟 ADD THIS SORT LOGIC — ensures sorting after every render/save\r\n\r\n    mappedData.sort((a, b) => a.Plant.localeCompare(b.Plant));\r\n\r\n\r\n  // 🌟 Return the final sorted array\r\n  return mappedData;\r\n};\r\n\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = () => {\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    // { accessorKey: \"Seq\", header: \"Seq\" },\r\n    // { accessorKey: \"Status\", header: \"Status\" },\r\n    // { accessorKey: \"Change\", header: \"Change\" },\r\n    // { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    // { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    // { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    // { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n    // {\r\n    //   accessorKey: \"MBom\",\r\n    //   header: \"MBom\",\r\n      \r\n    // },\r\n    // { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    // { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    // { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    // { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_OPRATION_HANDLE_ON_STATE_ERROR\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst CompanionToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  hasChanges,       // ✅ NEW\r\n  onCancel,         // ✅ NEW\r\n  setHasChanges     // ✅ NEW\r\n}) => {\r\n  const { showWarningToast, showSuccessToast } = useToast();\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleRemove = () => {\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    addedPlant(data);\r\n    if (setHasChanges) setHasChanges(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n\r\n       <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n\r\n\r\n      </div>\r\n\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompanionToolbarNativeCta;\r\n","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./companionWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport store from \"../../store\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\n\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setCAItemObjectDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n  setPreparedDataOuput,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./comapnaiondataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useCompanionDropableArea from \"../../hooks/useCompanionDropableArea\";\r\nimport {\r\n  handleAddData,\r\n  handleRemoveData,\r\n  saveData,\r\n} from \"../../services/api/companion/saveTableDataService\";\r\nimport CompanionToolbarNativeCta from \"./companionWidgetToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\n\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport { noPlants } from \"../../services/api/companion/noPlants\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/companion/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/companion/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\nimport DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\n\r\nconst CompanionWidget = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [showConfirmRemove, setShowConfirmRemove] = useState(false);\r\n  const { initializeDroppableArea, loading } = useCompanionDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const { handleDrop } = useCompanionDropableArea(); // 🔁 same as WidgetLifecycle // this will be used for Saving Data\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const [initialTableData, setInitialTableData] = useState([]);\r\n  const [hasChanges, setHasChanges] = useState(false);\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n  };\r\n  const handleRemove = async () => {\r\n    setShowConfirmRemove(true);\r\n    console.log(\"Remove button clicked, showing confirmation modal...\");\r\n  };\r\n\r\n  const confirmedRemove = async () => {\r\n    const csrfTokenHeaders = await fetchCsrfToken();\r\n    const CAHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      ...csrfTokenHeaders,\r\n    };\r\n    // Only runs if the user already confirmed\r\n    console.log(\"Confirmed remove logic running...\");\r\n\r\n    const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n    const removedTitles = selectedTitles.map((title) => ({ title }));\r\n\r\n    const updatedTableData = tableData.filter(\r\n      (row) => !selectedTitles.includes(row.Plant)\r\n    );\r\n\r\n    if (updatedTableData) {\r\n      setTableData(updatedTableData);\r\n      setTableKey((prevKey) => prevKey + 1);\r\n    }\r\n\r\n    setUniqueData((prevUniquePlants) => [\r\n      ...prevUniquePlants,\r\n      ...removedTitles,\r\n    ]);\r\n\r\n    showSuccessToastWithProgress(\"Plants removed successfully.\");\r\n\r\n    // await handleRemoveData(\r\n    //   removedTitles,\r\n    //   droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n    //   type\r\n    // );\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n\r\n  // Add a useEffect for this:\r\n  useEffect(() => {\r\n    if (selectedTableRows.length > 0) {\r\n      setHasChanges(true);\r\n    }\r\n  }, [selectedTableRows]);\r\n\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.CompanionObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.CompanionObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.CompanionObjectData.CAName\r\n  );\r\n\r\n  useEffect(() => {\r\n    setUniqueData(uniquePlant);\r\n  }, [uniquePlant]);\r\n\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    setAssignedPlant(asignedPlant);\r\n  }, [asignedPlant, type]);\r\n\r\n  // Runs only when type !== \"Change Action\"\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return getTableData(assignedPlant);\r\n  }, [assignedPlant]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setInitialTableData(JSON.parse(JSON.stringify(newTableData))); // ✅ Deep copy\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(() => tableColumns(), []);\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      // setPlantObjectData({\r\n      //   allPlants: [],\r\n      //   initialAssignedPlants: [],\r\n      //   uniquePlants: [],\r\n      //   productChildren: [],\r\n      //   CAName: false,\r\n      //   headers: {},\r\n      //   proposedChanges: [],\r\n      //   CAData: {},\r\n      // })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setTableData(JSON.parse(JSON.stringify(initialTableData))); // ✅ Fully restore table\r\n    setTableData(initialTableData);\r\n    setHasChanges(false);\r\n    // setCAItemDetailsTable(CAItemDetails); // ✅ Reset Change Action table too\r\n    setIsRemoveMode(false); // Optional: exit remove mode\r\n    // dispatch(setSelectedTableRows([])); // ✅ Reset selection\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable((prev) =>\r\n        prev.map((item) => ({\r\n          ...item,\r\n          ItemPlants: item.ItemPlants.map((plant) => ({\r\n            ...plant,\r\n            color: undefined, // ✅ This removes \" - Add\" and \" - Removed\"\r\n          })),\r\n        }))\r\n      );\r\n    }\r\n  };\r\n  console.log(\"Has Changes?\", hasChanges);\r\n\r\n  const handleAdded = (selectedPlants, preparedDataOutput) => {\r\n    const response = selectedPlants.map((plant) => ({\r\n    ...plant,\r\n    preparedData: preparedDataOutput,\r\n    actionTag: \"Add\",\r\n  }));\r\n\r\n  console.log(\"Final Response:\", response);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* {isAddingPlant && <Loader />} */}\r\n\r\n      {screenLoader && <Loader />}\r\n\r\n      <ConfirmationModal\r\n        show={showConfirmRemove}\r\n        onHide={() => setShowConfirmRemove(false)}\r\n        onConfirm={async () => {\r\n          setShowConfirmRemove(false);\r\n          await confirmedRemove(); // 👈 perform actual remove\r\n        }}\r\n      />\r\n\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent />\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"PlantAssignment\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <CompanionToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  hasChanges={hasChanges}         // ✅ NEW\r\n                  onCancel={handleCancel}         // ✅ NEW\r\n                  setHasChanges={setHasChanges}   // ✅ NEW\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  // meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompanionWidget;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport CompanionWidget from \"./CompanionWidget\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <CompanionWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["_ref","variant","message","show","className","_jsx","Alert","children","onDrop","handleDrop","defaultHandleDrop","useDroppableArea","performSearch","useInterComSearch","_Fragment","_jsxs","Image","style","width","height","src","alt","SearchInput","onSearch","searchText","title","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","length","id","objectId","objectType","console","warn","onHide","footerButtons","Modal","size","centered","Header","closeButton","Title","Body","Footer","map","btn","index","Button","onClick","label","onConfirm","CustomModal","ReusableAlert","errors","processedErrors","useMemo","errorGroups","reduce","groups","error","rowMatch","match","columnMatch","errorMsg","split","slice","join","rowNumber","columnName","includes","columns","push","Object","values","sort","a","b","Number","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","parent","CellMeasurer","columnIndex","rowIndex","column","i","err","CustomButton","handleExportErrors","exportData","handleExportExcel","text","AutoSizer","_ref3","List","rowCount","rowHeight","deferredMeasurementCache","log","ErrorPopup","forwardRef","ref","data","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","item","original","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","cell","row","type","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","getRowModel","forEach","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","columnDef","getContext","accessorKey","ENOVIA_BASE_URL","ClassDetails","async","getPlantTitleByClassID","headers","classId","url","concat","response","callEnoviaWebService","output","totalItems","member","getAssignedPlants","mfgIdentifier","classIDs","ClassificationAttributes","Array","isArray","filter","classItem","plantAssignmentAttr","Attributes","find","attr","name","value","ClassID","getPlantClassIDs","plantTitles","existing","classid","getMFGChilders","identifier","body","expandDepth","withPath","status","Promise","all","assignedPlants","child","AssignedPlants","prepareDataOutput","droppedMfgID","engItemId","identifiers","getManufacturingItems","detailsArray","createdFrom","getMfgItemDetails","items","createdFromSet","Set","Boolean","cf","result","isParent","has","currentObject","fetchCsrfToken","securityContext1","window","widget","getValue","WAFData","loadWAFData","csrfURL","process","resolve","reject","authenticatedRequest","method","onComplete","onFailure","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue","useCompanionWidget","showErrorToast","dispatch","useDispatch","email","handleCompanion","collabSpace","setParentDetailsLoading","MSG_FETCH_CSRF_HEADERS_FAILED","allPlants","scopeLinekdData","getScopedItms","itemResponse","_itemResponse$output$3","classExtensions","_attributes$find","attributes","getClassTitleById","getPlantClasses","prepareData","setPreparedDataOuput","plantLists","preparedDataOutput","engItemPlants","currentMfgItem","mfg","AvailablePlants","otherPlants","mfgItem","plant","availablePlants","preparePlantLists","setCompanionObjectData","initialAssignedPlants","uniquePlants","getCaDetails","objectID","resObejct","proposedChangesArray","CADetails","patternsToCheck","URLCADetails","widgetId","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","lang","ghostMode","url2","bd","responseMode","ids","_objectSpread","JSON","stringify","response2","pattern","objectsByPatterns","itm","url3","response3","proposedChanges","proposedChange","where","action","whats","what","realizedChanges","realizedChange","operations","toLowerCase","some","change","success","CAData","fetchCADetails","setCANameForCompanion","ScopeEngItem","useCompanionDropableArea","isDropped","useSelector","droppedObject","loading","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","_dataItems$3","MSG_INVALID_MFG_TYPES","setTimeout","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","WidgetLifecycle","showSuccessToast","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","userClickedRefresh","sessionStorage","getItem","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","droppedObjectData","initialDraggedData","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","Loader","uniqueColumns","header","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","hasChanges","onCancel","setHasChanges","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleRemove","_availablePlantRef$cu","current","AvailablePlant","CompanionWidget","showSuccessToastWithProgress","showErrorToastWithProgress","useToastWithProgress","showConfirmRemove","setShowConfirmRemove","tableKey","setTableKey","tableData","setTableData","assignedPlant","setAssignedPlant","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","isRemoveMode","setIsRemoveMode","initialTableData","setInitialTableData","selectedTableRows","loadingParentDetails","uniquePlant","CompanionObjectData","asignedPlant","prevKey","_droppedObjectData$in","_droppedObjectData$in2","dupInitialAssignedClasses","setDupInitialAssignedClasses","newTableData","mappedData","Plant","localeCompare","getTableData","uniqueTableData","getUniqueTableData","Type","owner","Owner","Description","imageURL","EIN","getCardData","parse","ConfirmationModal","csrfTokenHeaders","selectedTitles","removedTitles","updatedTableData","prevUniquePlants","confirmedRemove","display","flexDirection","justifyContent","position","DragAndDropComponent","handleHomeClick","setIsDropped","parentDetails","versions","CardWithDragAndDrop","widgetType","CompanionToolbarNativeCta","handleAdded","selectedPlants","preparedData","actionTag","handleCancel","prev","ItemPlants","color","undefined","ReusableTable","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}