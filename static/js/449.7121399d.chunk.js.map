{"version":3,"file":"static/js/449.7121399d.chunk.js","mappings":"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","sources":["components/Alert/ReusableAlert.jsx","components/Modal/customModal.jsx","components/Modals/ConfirmationModal.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Popup/Popup.jsx","pages/plantAssignment/WidgetLifecycle.jsx","pages/plantAssignment/dataHelpers.js","pages/plantAssignment/plantAssignmentToolbarNativeCta.jsx","pages/plantAssignment/DragAndDrop.jsx","services/api/PlantAssignment/createMFGCA.js","pages/plantAssignment/plantAssignment.jsx","pages/plantAssignment/plantIndex.js","services/api/PlantAssignment/saveTableDataService.js"],"sourcesContent":["import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","// ConfirmationModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\n\r\nconst ConfirmationModal = ({ show, onHide, onConfirm }) => {\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Confirmation\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Confirm\",\r\n          variant: \"success\",\r\n          onClick: onConfirm,\r\n        },\r\n      ]}\r\n    >\r\n      <p>Are you sure you want to submit?</p>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {plant.color === \"green\" && \" - Add\"}\r\n          {plant.color === \"red\" && \" - Removed\"}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type, CAData) => {\r\n  console.log(\"cadata datahelpers\",CAData );\r\n  \r\n  if (!tableData) return [];\r\n\r\n  // 🌟 Start Mapping Data\r\n  let mappedData = tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        Seq: data?.Seq || \"1\",\r\n        Status: data?.PlantStatus || \"Pending\",\r\n        \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        Change: data?.Change || CAData.CAName ||\"N/A\",\r\n        \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n        \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        \"ERP Status\": \"Active\" || \"N/A\",\r\n        \"ERP Export\": \"Yes\" || \"N/A\",\r\n        \"Lead Plant\": false,\r\n        MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n\r\n  // 🌟 ADD THIS SORT LOGIC — ensures sorting after every render/save\r\n  if (type === \"Change Action\") {\r\n    mappedData.sort((a, b) => a.ItemName.localeCompare(b.ItemName));\r\n  } else {\r\n    mappedData.sort((a, b) => a.Plant.localeCompare(b.Plant));\r\n  }\r\n\r\n  // 🌟 Return the final sorted array\r\n  return mappedData;\r\n};\r\n\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      {\r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => {\r\n          const plantList = row.original.Plant;\r\n          const tooltipText = Array.isArray(plantList)\r\n            ? plantList.map(p => p.PlantName || p.title || \"\").join(\", \")\r\n            : \"N/A\";\r\n  \r\n          return (\r\n            <span title={tooltipText}>\r\n              <PlantRenderer\r\n                plants={plantList}\r\n                itemId={row.original.ItemId}\r\n                isRemoveMode={isRemoveMode}\r\n                handleRemovePlant={handleRemovePlant}\r\n              />\r\n            </span>\r\n          );\r\n        },\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    { accessorKey: \"Seq\", header: \"Seq\" },\r\n    { accessorKey: \"Status\", header: \"Status\" },\r\n    { accessorKey: \"Change\", header: \"Change\" },\r\n    { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    { accessorKey: \"Oracle Template\", header: \"Oracle Template\" },\r\n    {\r\n      accessorKey: \"MBom\",\r\n      header: \"MBom\",\r\n      \r\n    },\r\n    { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_OPRATION_HANDLE_ON_STATE_ERROR\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst PlantAssignmentToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n  CAData\r\n}) => {\r\n  const { showWarningToast, showSuccessToast } = useToast();\r\n  const isStateBlocked = (currentState) => {\r\n    return currentState === \"Approved\" || currentState === \"In Approval\" || currentState === \"Completed\";\r\n  };\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n\r\n    if (onSave && (type === \"Change Action\" || CAName)) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Pending\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: CAData.CAName,\r\n          \"Change Status\": CAData.CAStatus,\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"N/A\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (isStateBlocked(state)) {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n                return;\r\n              }\r\n\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (state === \"Approved\" || state === \"In Approval\" || state === \"Completed\") {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n              } else {\r\n                setAddPlantPopup(true);\r\n              }\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n\r\n        {type === \"Change Action\" && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={handleSaveClick}\r\n          >\r\n            Save\r\n          </button>\r\n        )}\r\n       {isMFGCA === false && (\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n      )}\r\n\r\n      </div>\r\n\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignmentToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import * as XLSX from \"xlsx\";\r\nimport { getAllPlants } from \"./allPlantSevice\";\r\nimport { fetchCsrfToken } from \"./fetchCsrfService\";\r\nimport axios from \"axios\";\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\n// Import useToastWithProgress\r\n \r\n// const { showSuccessToastWithProgress, showErrorToastWithProgress } = useToastWithProgress();\r\n \r\n \r\nconst fetchData = async (\r\n  url,\r\n  body = null,\r\n  method = \"GET\"\r\n  // headers = {}\r\n) => {\r\n  console.log(\"Fetching URL:\", url);\r\n  console.log(\"Method is:\");\r\n  console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n  try {\r\n    const response = await axios({\r\n      url,\r\n      method,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      data: body, // Include body only if provided\r\n    });\r\n \r\n    console.log(\"Response received:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Request failed:\", error);\r\n    throw error; // Propagate the error to the caller\r\n  }\r\n};\r\n// Function to create the manufacturing CA body from Excel data and allPlants\r\nexport const createManufacturingCABody = async (\r\n  excelData,\r\n  allPlantsData,\r\n  companyName,\r\n  collabSpace\r\n) => {\r\n  const items = [];\r\n  const uniquePlantTitles = new Set();\r\n \r\n  for (let i = 1; i < excelData.length; i++) {\r\n    const row = excelData[i];\r\n    if (row.length >= 2 && row[0] && row[1]) {\r\n      const itemName = row[0].toString().trim();\r\n      const plantsList = row[1].toString().includes(\",\")\r\n        ? row[1]\r\n            .toString()\r\n            .split(\",\")\r\n            .map((p) => p.trim())\r\n        : [row[1].toString().trim()];\r\n      items.push({\r\n        name: itemName,\r\n        plants: plantsList,\r\n      });\r\n      plantsList.forEach((plant) => uniquePlantTitles.add(plant));\r\n    }\r\n  }\r\n \r\n  const parentPlants = [];\r\n  uniquePlantTitles.forEach((plantTitle) => {\r\n    const matchedPlant = allPlantsData.find((plant) => {\r\n      const normalizedTitle = plant.title.replace(/^Plant\\s+/, \"\");\r\n      return normalizedTitle === plantTitle || plant.title === plantTitle;\r\n    });\r\n    if (matchedPlant) {\r\n      parentPlants.push({\r\n        PlantName: matchedPlant.title.replace(/^Plant\\s+/, \"\"),\r\n        PlantID: matchedPlant.id,\r\n      });\r\n    }\r\n  });\r\n \r\n  return {\r\n    CATitle: \"FromAutomation\",\r\n    CAOrganization: companyName, // company name credentials\r\n    CACollabSpace: collabSpace, // from credentials\r\n    CAOwner: \"e1331143\",\r\n    Items: items,\r\n    ParentPlants: parentPlants,\r\n  };\r\n};\r\n \r\n// Function to make the API call\r\nexport const callManufacturingCAApi = async (body) => {\r\n  const manufacturingCAUrl =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/createMFGCA\";\r\n \r\n // console.log(\"Headers for Manufacturing CA API:\", CAHeaders);\r\n \r\n  const response = await fetchData(\r\n    manufacturingCAUrl,\r\n    body,\r\n    \"POST\"\r\n  );\r\n  console.log(\"Manufacturing CA Response:\", JSON.stringify(response));\r\n  return response;\r\n};\r\n \r\n// Function to handle file change (only validation)\r\nexport const handleFileChange = async (\r\n  event,\r\n  setValidationErrors,\r\n  setShowErrorsModal,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n  setValidatedData, // New parameter to store validated data\r\n  setSelectedFiles,\r\n  setIsCreateButtonDisabled\r\n) => {\r\n \r\n  console.log(\"[handleFileChange] Function triggered\");\r\n \r\n  const files = event.target.files;\r\n  const validExtensions = [\r\n    \"application/vnd.ms-excel\",\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n  ]; // MIME types for .xls and .xlsx\r\n \r\n  // Check if all files are valid Excel files\r\n  const invalidFiles = Array.from(files).filter(\r\n    (file) =>\r\n      !validExtensions.includes(file.type) &&\r\n      !file.name.toLowerCase().endsWith(\".xls\") &&\r\n      !file.name.toLowerCase().endsWith(\".xlsx\")\r\n  );\r\n \r\n  if (invalidFiles.length > 0) {\r\n    showErrorToast(\"Only Excel files (.xls, .xlsx) can be uploaded\");\r\n    event.target.value = \"\"; // Reset the file input\r\n    setIsCreateButtonDisabled(true); // Disable the button if invalid files are present\r\n    return;\r\n  }\r\n \r\n  const file = files[0];\r\n  const reader = new FileReader();\r\n \r\n  reader.onload = async (e) => {\r\n    const data = new Uint8Array(e.target.result);\r\n    const workbook = XLSX.read(data, { type: \"array\" });\r\n    const sheetName = workbook.SheetNames[0];\r\n    const sheet = workbook.Sheets[sheetName];\r\n    const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 }); // Get data as a 2D array\r\n \r\n    console.log(\"Parsed Excel Data:\", jsonData);\r\n \r\n    // Validation: Check if the file is empty\r\n    if (jsonData.length === 0) {\r\n      showErrorToast(\"File is empty\");\r\n      setIsCreateButtonDisabled(true);\r\n      return;\r\n    }\r\n \r\n   \r\n \r\n    // Validation: Check if headers match \"Item\" and \"Plants\"\r\n    const normalizedHeaders = jsonData[0].map((header) =>\r\n      header?.toString().trim().toLowerCase()\r\n    ); // Normalize headers\r\n    console.log(\"Normalized Headers:\", normalizedHeaders);\r\n \r\n    if (normalizedHeaders[0] !== \"item\" || normalizedHeaders[1] !== \"plants\") {\r\n      showErrorToast(\r\n        \"File headers are incorrect. Expected headers: 'Item' and 'Plants'\"\r\n      );\r\n      setIsCreateButtonDisabled(true);\r\n      return;\r\n    }\r\n \r\n    // Validation: Check if the file contains only headers and no data\r\n    if (jsonData.length === 1) {\r\n      showErrorToast(\"No data present in the file. Only headers are present.\");\r\n      return;\r\n    }\r\n \r\n    const errors = [];\r\n    for (let i = 1; i < jsonData.length; i++) {\r\n      const row = jsonData[i];\r\n      const item = row[0];\r\n      const plants = row[1];\r\n \r\n      if (!item && plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Item\",\r\n          errorDescription: \"Items can't be empty\",\r\n        });\r\n      }\r\n \r\n      if (item && !plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Plants\",\r\n          errorDescription: \"Plants value is missing\",\r\n        });\r\n      }\r\n    }\r\n \r\n    console.log(\"Validation Errors:\", errors);\r\n \r\n    if (errors.length > 0) {\r\n      const formattedErrors = errors.map(\r\n        (error) =>\r\n          `Row ${error.rowNumber}: \"${error.columnName}\" value ${error.errorDescription}`\r\n      );\r\n \r\n      console.log(\"[createMFGCA.js] Formatted Errors:\", formattedErrors);\r\n \r\n      setValidationErrors(formattedErrors);\r\n      setShowErrorsModal(true);\r\n      setIsCreateButtonDisabled(true);\r\n    } else {\r\n      showSuccessToast(\"File uploaded successfully with no errors\");\r\n      setValidatedData(jsonData); // Store validated data for further processing\r\n      setSelectedFiles(file);// Update selectedFiles state only after successful validation\r\n      setIsCreateButtonDisabled(false);\r\n    }\r\n  };\r\n \r\n  reader.onerror = () => {\r\n    showErrorToast(\"Failed to read the file. Please try again.\");\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n \r\n  reader.readAsArrayBuffer(file);\r\n};\r\n \r\n// New function to process Manufacturing CA\r\nexport const processManufacturingCA = async (\r\n  validatedData,\r\n  showSuccessToastWithProgress,\r\n  showErrorToastWithProgress\r\n) => {\r\n  try {\r\n \r\n    const csrfTokenHeaders = await fetchCsrfToken();\r\n    const CAHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      ...csrfTokenHeaders\r\n    };\r\n    let credentials = window.widget.getValue(\"Credentials\");\r\n    console.log(\"credentials createMFGCA\", credentials);\r\n    const credentialsParts = credentials.split(\".\");\r\n    console.log(\"credentialsParts\", credentialsParts);\r\n    const companyName = credentialsParts[1]; // Value after the first dot\r\n    console.log(\"Company Name:\", companyName);\r\n    const collabSpace = credentialsParts[2]; // Value after the second dot\r\n \r\n    console.log(\"Collab Space:\", collabSpace);\r\n \r\n    const allPlantsData = await getAllPlants([collabSpace], CAHeaders, \"\");\r\n    console.log(\"Fetched allPlantsData:\", allPlantsData);\r\n \r\n    const manufacturingCABody = await createManufacturingCABody(\r\n      validatedData,\r\n      allPlantsData,\r\n      companyName,\r\n      collabSpace\r\n    );\r\n    console.log(\r\n      \"[processManufacturingCA] Manufacturing CA Body (JSON):\",\r\n      JSON.stringify(manufacturingCABody, null, 2)\r\n    );\r\n \r\n    // Pass headers to callManufacturingCAApi\r\n    const response = await callManufacturingCAApi(\r\n      manufacturingCABody\r\n    );\r\n    console.log(\"[processManufacturingCA] Manufacturing CA API Response:\", response);\r\n \r\n    // Extract CAName from the response\r\n    const CAName = response?.CAName ;\r\n    //showSuccessToastWithProgress(`Manufacturing CA created successfully! Name: ${CAName}`);\r\n    showSuccessToastWithProgress(\r\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n    <span>\r\n      Manufacturing CA created successfully! Name: <strong>{CAName}</strong>\r\n    </span>\r\n    <button\r\n      onClick={(event) => {\r\n        event.stopPropagation(); // Prevent the toast from closing\r\n        navigator.clipboard.writeText(CAName); // Copy the CAName to clipboard\r\n      }}\r\n      style={{\r\n        background: \"none\",\r\n        border: \"none\",\r\n        cursor: \"pointer\",\r\n        marginLeft: \"8px\",\r\n        color: \"grey\",\r\n      }}\r\n      title=\"Copy CA Name\"\r\n    >\r\n      <FaRegCopy size={14} />\r\n    </button>\r\n  </div>\r\n    );\r\n    // showSuccessToast(\"Manufacturing CA created successfully!\");\r\n  } catch (error) {\r\n    console.error(\"Error in processManufacturingCA:\", error);\r\n    showErrorToastWithProgress(\"Failed to create Manufacturing CA. Please try again.\");\r\n  }\r\n};","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./plantAssignment.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport store from \"../../store\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\n\r\n\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setCAItemObjectDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { handleAddData, handleRemoveData, saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport PlantAssignmentToolbarNativeCta from \"./plantAssignmentToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/PlantAssignment/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst PlantAssignment = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [isAddingPlant, setIsAddingPlant] = useState(false); // State for loader\r\n  const [validatedData, setValidatedData] = useState(null);\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [isFileInputDisabled, setIsFileInputDisabled] = useState(false); // New state to disable file input\r\n  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState(true); // New state to control button enablement\r\n  const { handleDrop } = usePlantDropableArea(); // 🔁 same as WidgetLifecycle\r\n  const [showConfirmRemove, setShowConfirmRemove] = useState(false);\r\n  const [pendingRemoveAction, setPendingRemoveAction] = useState(false);\r\n  \r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const fileInputRef = useRef(null); // Create a ref for the file input\r\n\r\n  const handleFileInputChange = (event) => {\r\n    handleFileChange(\r\n      event,\r\n      setValidationErrors,\r\n      setShowErrorsModal,\r\n      showErrorToast, // Pass toast functions\r\n      showSuccessToast,\r\n      setValidatedData,\r\n      setSelectedFiles,\r\n      setIsCreateButtonDisabled\r\n    ).finally(() => {\r\n      setScreenLoader(false); // Hide loader after validation is complete\r\n    });\r\n    setIsFileInputDisabled(true);\r\n   // setIsCreateButtonDisabled(false); // Enable the \"Create Manufacturing CA\" button\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    extractPlantData(tableData);\r\n    setScreenLoader(true);\r\n\r\n    if (type === \"Change Action\") {\r\n      if (isMFGCA === true) {\r\n        console.log(\"Manufacturing CA Save Called\");\r\n        const response = await getSaveDataForManufacturingCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      } else {\r\n        console.log(\"Engineering CA Save Called\");\r\n     \r\n        const response = await getSaveDataForCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n     \r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n     \r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n        \r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          // ✅ Silent refresh after save to update Redux/UI\r\n          const droppedItems = store.getState().droppedObject.droppedObjectData.initialDraggedData?.data?.items;\r\n          if (droppedItems?.length) {\r\n            await refreshWidgetData(droppedItems, handleDrop);\r\n          }\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n       \r\n      }\r\n    } else {\r\n      await onSave(tableData); // Pass tableData when calling onSave\r\n    }\r\n  };\r\n  const handleRemove = async () => {\r\n    if ((type === \"Raw Material\" || type === \"Physical Product\") && !pendingRemoveAction) {\r\n      setShowConfirmRemove(true);\r\n      setPendingRemoveAction(true);\r\n      return;\r\n    }\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode((prev) => !prev); // ✅ Toggles the mode\r\n    } else {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n\r\n      if (selectedTableRows.length > 0) {\r\n        // Extract IDs or titles of selected rows\r\n        const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n        console.log(\"Selected Titles:\", selectedTitles);\r\n        const removedTitles = selectedTitles.map((title) => ({\r\n          title: title,\r\n        }));\r\n        console.log(\"Removed Titles:\", removedTitles);\r\n        const updatedTableData = tableData.filter(\r\n          (row) => !selectedTitles.includes(row.Plant)\r\n        );\r\n        console.log(\"updateTableData\", updateTableData);\r\n        if (updateTableData) {\r\n          setTableData(updatedTableData);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n        }\r\n\r\n        // // Update state\r\n\r\n        setUniqueData((prevUniquePlants) => [\r\n          ...prevUniquePlants,\r\n          ...removedTitles,\r\n        ]); // Add removed items back to uniqueData\r\n        //added by ayush\r\n        showSuccessToastWithProgress(\"Plants removed successfully from the table.\");\r\n        await handleRemoveData( allPlants, removedTitles,droppedObjectData.initialDraggedData?.data?.items[0].objectId,type);\r\n      } else {\r\n        showErrorToastWithProgress(\"Please select at least one row to remove.\");\r\n      }\r\n\r\n      \r\n    }\r\n  };\r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.map((plant) =>\r\n                  plant.PlantID === plantId\r\n                    ? {\r\n                        ...plant,\r\n                        color: plant.color === \"red\" ? \"green\" : \"red\", // ✅ toggle\r\n                      }\r\n                    : plant\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n\r\n  const handleAdded = async (data) => {\r\n\r\n    setIsAddingPlant(true); \r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    console.log(\"CA Table data is\", CAItemDetails);\r\n\r\n    \r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n          const reduxPlants = reduxRow?.ItemPlants || [];\r\n          const existingPlants = row.ItemPlants || [];\r\n\r\n          const updatedExistingPlants = existingPlants.map((ep) => {\r\n            const shouldUpdateColor =\r\n              isMFGCA &&\r\n              data.includes(ep.PlantName.trim()) &&\r\n              reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n              );\r\n\r\n            return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n          });\r\n\r\n          const newPlantsToAdd = [];\r\n\r\n          data.forEach((plantName) => {\r\n            const matchedPlant = CAAllPlants.find((plant) => {\r\n              const formattedTitle = plant.title\r\n                .replace(/^Plant\\s+/, \"\")\r\n                .trim();\r\n              return formattedTitle === plantName.trim();\r\n            });\r\n\r\n            if (!matchedPlant) return;\r\n\r\n            const existsInRedux = reduxPlants.some(\r\n              (rp) => rp.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            const existsInTable = existingPlants.some(\r\n              (ep) => ep.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            if (!existsInTable) {\r\n              newPlantsToAdd.push({\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                PlantERPStatus: \"Pending\", // ✅ This now controls remove visibility\r\n                // ...(isMFGCA && { color: existsInRedux ? \"red\" : \"green\" }),\r\n                ...(existsInRedux ? { color: \"red\" } : { color: \"green\" }),\r\n              });\r\n            }\r\n          });\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      setScreenLoader(true);\r\n      console.log(\"Handling plants for table addition...\");\r\n\r\n    // Fetch ErrorObject and Finalmessage from handleAddData\r\n\r\n    try {\r\n\r\n    const { ErrorObject, Finalmessage } = await handleAddData(\r\n      data,\r\n      allPlants,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      type,\r\n      proposedChanges,\r\n      productChildren,\r\n      hasMBOM\r\n    );\r\n    console.log(\"ErrorObject from handleAddData:\", ErrorObject); // Log the ErrorObject\r\n    console.log(\"Finalmessage from handleAddData:\", Finalmessage); // Log the Finalmessage\r\n\r\n    // Check if any of the selected plants are in the ErrorObject\r\n    const erroredPlants = ErrorObject.map((item) =>\r\n      allPlants.find((plant) => plant.id === item.ClassID)?.title\r\n    );\r\n    console.log(\"Errored Plants:\", erroredPlants); // Log the errored plants\r\n\r\n    // Separate valid and invalid plants based on the ErrorObject\r\n    const validPlants = data.filter(\r\n      (plant) => !erroredPlants.includes(plant.title)\r\n    );\r\n    const invalidPlants = data.filter((plant) =>\r\n      erroredPlants.includes(plant.title)\r\n    );\r\n    console.log(\"Valid Plants:\", validPlants); // Log the valid plants\r\n    console.log(\"Invalid Plants:\", invalidPlants); // Log the invalid plants\r\n\r\n    // Show an alert only for the invalid plants that were selected\r\n    if (invalidPlants.length > 0) {\r\n      //show final message in toast\r\n      if (Finalmessage) {\r\n        showErrorToastWithProgress(Finalmessage, {\r\n          // autoClose: false, // Prevent auto-closing\r\n          // closeOnClick: false, // Prevent closing on click\r\n        });\r\n      }\r\n    \r\n      console.log(\"Finalmessage displayed in toast:\", Finalmessage);\r\n    }\r\n\r\n    // Update the unique plants list to include invalid plants (keep them in the popup)\r\n    setUniqueData((prevUniqueData) => [\r\n      ...prevUniqueData,\r\n      ...invalidPlants.map((plant) => ({ title: plant.title })),\r\n    ]);\r\n\r\n    // Add valid plants to the table\r\n    if (validPlants.length > 0) {\r\n      setTableData((prev) => [\r\n        ...validPlants.map(({ title, ...rest }) => ({ Plant: title, ...rest })),\r\n        ...prev,\r\n      ]);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n      showSuccessToastWithProgress(\"Plants added successfully.\");\r\n    }\r\n  }\r\n  catch (error) {\r\n    console.error(\"Error while adding plants:\", error);\r\n    showErrorToastWithProgress(\"Failed to add plants. Please try again.\");\r\n  } finally {\r\n    // setIsAddingPlant(false); // Hide loader when adding is complete\r\n    setScreenLoader(false); //Hide loader when adding is complete\r\n  }\r\n}\r\n};\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n  const extractPlantData = (tableData) => {\r\n    const plantData = tableData.map((row) => ({\r\n      itemName: row.ItemName, // Replace with the actual key for Item Name\r\n      plantName: row.Plant, // Replace with the actual key for Plant Name\r\n    }));\r\n    console.log(\"Extracted Plant Data:\", plantData);\r\n    return plantData;\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n  const CAHeaders = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAheaders\r\n  );\r\n  console.log(\"caheaders plant assign\", CAHeaders);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  // const handleFileInputChange = (event) => {\r\n  //   handleFileChange(event, allPlants, CAHeaders, setValidationErrors, setShowErrorsModal);\r\n  // };\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n\r\n  const CAData = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAData\r\n  );\r\n  console.log(\"The CAData is....:\", CAData);\r\n\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return allPlants.map((plant) => ({ title: plant }));\r\n \r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var hasMBOM = droppedObjectData.cardData[\"HasMBOM\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  // Runs only when type === \"Change Action\"\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    }\r\n  }, [getUniquePlant, type]);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable.length) return;\r\n  \r\n  //   const isAnyMFG = CAItemDetailsTable.some(\r\n  //     (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //   );\r\n  \r\n  //   if (isAnyMFG !== isMFGCA) {\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFG\r\n  //     }));\r\n  //   }\r\n  // }, [CAItemDetailsTable, isMFGCA, dispatch]);\r\n  \r\n  \r\n\r\n  // Runs only when type !== \"Change Action\"\r\n  useEffect(() => {\r\n    if (type !== \"Change Action\") {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n\r\n              // ✅ ADD THIS NOW\r\n        setCAItemDetailsTable((prev) =>\r\n          prev.map((item) => ({\r\n            ...item,\r\n            ItemPlants: item.ItemPlants.map((plant) => ({\r\n              ...plant,\r\n              color: undefined,\r\n            })),\r\n          }))\r\n        );\r\n\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type, CAData)\r\n      : getTableData(assignedPlant, type, CAData);\r\n  }, [CAItemDetailsTable, assignedPlant, type, CAData]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  useEffect(() => {\r\n    // After cardData or tableData updates, check if it's MFGCA, then reset remove mode\r\n    if (type === \"Change Action\" && isMFGCA) {\r\n      setIsRemoveMode(false); // ✅ Important: Reset Remove Mode if Manufacturing CA is dropped\r\n    }\r\n  }, [cardData, tableData, isMFGCA, type]);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant),\r\n    [CAName, type, isRemoveMode, handleRemovePlant]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n        CAData: {},\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemObjectDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleReset = () => {\r\n    // Reset all states related to file upload\r\n    setValidatedData(null);\r\n    setSelectedFiles(null);\r\n    setValidationErrors([]);\r\n    setShowErrorsModal(false);\r\n    setTableData([]);\r\n  setUniqueData([]);\r\n  setCAItemDetailsTable([]);\r\n  setAssignedPlant([]);\r\n  setDupInitialAssignedClasses([]);\r\n  setTableKey(0);\r\n\r\n    // Re-enable the file input\r\n    setIsFileInputDisabled(false);\r\n\r\n    // Clear the file input value using the ref\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\"; // Reset the file input value\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button\r\n    setIsCreateButtonDisabled(true);\r\n\r\n    // Optionally show a toast message\r\n    //showSuccessToast(\"File upload has been reset.\");\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n\r\n    if (!validatedData) {\r\n      showErrorToast(\"Please upload and validate a file before proceeding.\");\r\n      return;\r\n    }\r\n\r\n    setScreenLoader(true); // Show loader when the process starts\r\n\r\n    // const CAHeaders = await fetchCsrfToken(); // Fetch headers\r\n    try {\r\n      await processManufacturingCA(\r\n        validatedData,\r\n        showSuccessToastWithProgress,\r\n        showErrorToastWithProgress\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error in handleSubmit:\", error);\r\n    } finally {\r\n      setScreenLoader(false); // Hide loader after the process is complete\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button after submission\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  \r\n  return (\r\n    <>\r\n    {/* {isAddingPlant && <Loader />} */}\r\n \r\n      {screenLoader && <Loader />}\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          <div\r\n            style={{\r\n              padding: \"0px 0px 10px 0px\",\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Button\r\n              variant=\"outline-primary\"\r\n              onClick={() => {\r\n                const link = document.createElement(\"a\");\r\n                link.href =\r\n                  \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                link.click();\r\n              }}\r\n            >\r\n              Download Template\r\n            </Button>\r\n\r\n            <Form.Group controlId=\"formFileMultiple\">\r\n              <Form.Control\r\n                type=\"file\"\r\n                multiple\r\n                onChange={handleFileInputChange}\r\n                disabled={isFileInputDisabled}\r\n                ref={fileInputRef} // Attach the ref to the file input\r\n              />\r\n            </Form.Group>\r\n            <Button variant=\"outline-danger\" onClick={handleReset}>\r\n              <FontAwesomeIcon icon={faRotateLeft} />\r\n            </Button>\r\n\r\n            <div\r\n              style={{\r\n                display: \"inline-block\",\r\n                cursor: isCreateButtonDisabled ? \"not-allowed\" : \"pointer\", // Apply cursor style to the wrapper div\r\n              }}\r\n            >\r\n              <Button\r\n                variant=\"outline-primary\"\r\n                onClick={handleSubmit}\r\n                disabled={isCreateButtonDisabled} // Disable the button\r\n              >\r\n                Create Manufacturing CA\r\n              </Button>\r\n            </div>\r\n\r\n            {/* <Button variant=\"outline-primary\" onClick={handleReset}>\r\n              Reset\r\n            </Button> */}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"PlantAssignment\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <PlantAssignmentToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                  CAData={CAData}\r\n                />\r\n                <ReusableTable\r\n                \r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  // meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {/* Show validation errors in ErrorDisplayTable\r\n       {validationErrors.length > 0 && (\r\n              <ErrorDisplayTable errors={validationErrors} />\r\n            )} */}\r\n      {/* Show validation errors in ContentErrorsModal */}\r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n      <ConfirmationModal\r\n        show={showConfirmRemove}\r\n        onHide={() => {\r\n          setShowConfirmRemove(false);\r\n          setPendingRemoveAction(false); // reset on cancel\r\n        }}\r\n        onConfirm={async () => {\r\n          setShowConfirmRemove(false);\r\n          await handleRemove(); // Re-enter handleRemove, now with `pendingRemoveAction = true`\r\n          setPendingRemoveAction(false);\r\n        }}\r\n        title=\"Confirm Removal\"\r\n        message=\"Are you sure you want to remove the selected plant(s)?\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignment;\r\n\r\nexport const getSaveDataForManufacturingCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemPlants: item.Plant.filter((plant) => plant.color) // include only if color exists\r\n          .map((plant) => {\r\n            const { color, ...rest } = plant;\r\n            return {\r\n              ...rest,\r\n              PlantType: color === \"green\" ? \"New\" : \"old\",\r\n            };\r\n          }),\r\n      };\r\n    }),\r\n  };\r\n  console.log(\"Payload for the Save is :\", payload);\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/processMFGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSaveDataForCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n \r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n \r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemMBOM: caDetails?.ItemMBOM || \"N/A\",\r\n        ItemPlants: item.Plant\r\n          .map((plant) => {\r\n            const originalItem = CAItemDetails.find((ci) => ci.ItemId === item.ItemId);\r\n            const wasInOriginal = originalItem?.ItemPlants?.some(\r\n              (p) => p.PlantID === plant.PlantID\r\n            );\r\n \r\n            const isMarkedNew = plant.color === \"green\";\r\n            const isMarkedRemove = plant.color === \"red\";\r\n \r\n            // ✅ CASE 1: It was in DB, and now marked red → REMOVE\r\n            if (wasInOriginal && isMarkedRemove) {\r\n              return {\r\n                PlantName: plant.PlantName,\r\n                PlantID: plant.PlantID,\r\n                PlantType: \"Remove\",\r\n              };\r\n            }\r\n \r\n            // ✅ CASE 2: It was in DB, and not touched → send without PlantType\r\n            if (wasInOriginal && !isMarkedRemove) {\r\n              return {\r\n                PlantName: plant.PlantName,\r\n                PlantID: plant.PlantID,\r\n                PlantType: \"\", // or just omit this field if preferred\r\n              };\r\n            }\r\n \r\n            // ❌ CASE 3: It was NOT in DB, and is now red → skip it (don’t return anything)\r\n            if (!wasInOriginal && isMarkedRemove) {\r\n              return null;\r\n            }\r\n \r\n            // ✅ CASE 4: It was NOT in DB, and is green → NEW\r\n            if (!wasInOriginal && isMarkedNew) {\r\n              return {\r\n                PlantName: plant.PlantName,\r\n                PlantID: plant.PlantID,\r\n                PlantType: \"New\",\r\n              };\r\n            }\r\n \r\n            return null; // fallback\r\n          })\r\n          .filter(Boolean), // remove null entries (i.e. case 3)\r\n \r\n      };\r\n    }),\r\n  };\r\n \r\n  console.log(\"Payload for Engineering CA Save is:\", payload);\r\n \r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/processENGCA\";\r\n \r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport PlantAssignment from \"./plantAssignment\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <PlantAssignment />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport { fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n \r\n// Function to extract IDs from titles\r\nconst extractIdsFromTitles = (data, allPlants) => {\r\n  console.log(\"Data Received for ID Extraction:\", data);\r\n  console.log(\"[PlantAssignment] All Plants Data:\", allPlants);\r\n \r\n  const newClasses = data\r\n    .map((item) => {\r\n      const itemTitle = item.title.replace(/\\s+/g, \"\").replace(/plant/i, \"\");\r\n \r\n      const matchedPlant = allPlants.find((plant) => {\r\n        const plantTitle = plant.title\r\n          .replace(/\\s+/g, \"\")\r\n          .replace(/plant/i, \"\");\r\n        return plantTitle.toLowerCase() === itemTitle.toLowerCase();\r\n      });\r\n \r\n      return matchedPlant ? matchedPlant.id : null;\r\n    })\r\n    .filter((id) => id !== null);\r\n  // Remove null values (non-matching titles)\r\n \r\n  console.log(\"Extracted IDs (newClasses):\", newClasses);\r\n  return newClasses;\r\n};\r\n \r\nexport const handleRemoveData = async (\r\n  allPlants,\r\n  removedTitles,\r\n  productId,\r\n  type\r\n) => {\r\n  console.log(\"allPlants\", allPlants);\r\n  console.log(\"removedTitles\", removedTitles);\r\n  const rowstoDelete = extractIdsFromTitles(removedTitles, allPlants);\r\n  // console.log(\"newClasses handleRemoveData\",newClasses);\r\n \r\n  if (rowstoDelete.length > 0) {\r\n    let declassifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n    let classifybody = {\r\n      id: productId,\r\n      type: type,\r\n      classes: rowstoDelete,\r\n    };\r\n    const declassifyResponse = await fetchData(\r\n       \"POST\",\r\n      declassifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n  }\r\n};\r\n \r\n// Updated handleAddData function\r\nexport const handleAddData = async (\r\n  data,\r\n  allPlants,\r\n  objectId,\r\n  type,\r\n  proposedChanges,\r\n  productChilds,\r\n  hasMBOM\r\n) => {\r\n  console.log(\"Data Received for handleAddData:\", data);\r\n \r\n  // Step 1: Convert incoming data (titles) to class IDs\r\n  const newClasses = extractIdsFromTitles(data, allPlants);\r\n  console.log(\"newClasses before filtering:\", newClasses);\r\n  console.log(\"productChilds\", productChilds);\r\n \r\n  // Step 2: Filter productChilds that are released but not being modified\r\n  const NotPropagableChilds = productChilds.filter((prodChild) => {\r\n    if (prodChild.state.toLowerCase() === \"released\") {\r\n      const change = proposedChanges.find(\r\n        (change) =>\r\n          change.identifier === prodChild.id &&\r\n          change.action.toLowerCase() === \"modify\"\r\n      );\r\n      return !change;\r\n    }\r\n    return false;\r\n  });\r\n \r\n  console.log(\"NotPropagableChilds ARE:\", NotPropagableChilds);\r\n \r\n  // Step 3: Prepare Error Object\r\n  const ErrorObject = [];\r\n \r\n  newClasses.forEach((classId) => {\r\n    const missingIn = NotPropagableChilds.filter(\r\n      (child) => !child.classes.includes(classId)\r\n    )\r\n      .map((child) => child.name)\r\n      .join(\", \");\r\n \r\n    if (missingIn !== \"\" && missingIn !== \"Undefined\") {\r\n      ErrorObject.push({ ClassID: classId, Childs: missingIn });\r\n    }\r\n  });\r\n  console.log(\"error object savetable\", ErrorObject);\r\n \r\n  // Step 4: Generate Final Messages\r\n  let Finalmessage = \"\";\r\n  ErrorObject.forEach((item) => {\r\n    const classTitle = allPlants.find(\r\n      (plant) => plant.id === item.ClassID\r\n    )?.title;\r\n    const message = `Unable to classify product in ${classTitle} due to unclassified child items: ${item.Childs}`;\r\n    Finalmessage += `${message}\\n`;\r\n  });\r\n \r\n  console.log(\"Final Message:\\n\", Finalmessage);\r\n \r\n  // Step 5: Filter out newClasses that are present in ErrorObject\r\n  const filteredNewClasses = newClasses.filter(\r\n    (id) => !ErrorObject.some((item) => item.ClassID === id)\r\n  );\r\n  console.log(\r\n    \"Filtered New Classes (excluding errored ones):\",\r\n    filteredNewClasses\r\n  );\r\n \r\n  // Make the API call if newClasses is not empty\r\n  if (filteredNewClasses.length > 0) {\r\n    const classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n    const classifybody = {\r\n      id: objectId, // Use objectId from Redux\r\n      type: type, // Use type from Redux\r\n      classes: filteredNewClasses,\r\n      mode: \"classifyParent\",\r\n    };\r\n \r\n    console.log(\"Classify API Body:\", classifybody);\r\n \r\n    try {\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n    } catch (error) {\r\n      console.error(\"Error in Classify API Call:\", error);\r\n    }\r\n  }\r\n\r\n  if (\r\n    filteredNewClasses.length > 0 &&\r\n    productChilds.length > 0 &&\r\n    type === \"VPMReference\" &&\r\n    hasMBOM\r\n  ) {\r\n    let classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    let classifybody = {\r\n      id: objectId,\r\n      type: type,\r\n      classes: filteredNewClasses,\r\n      childs: productChilds,\r\n      mode: \"classifychilds\",\r\n    };\r\n    const childclassifyResponse = await fetchData(\r\n       \"POST\",\r\n      classifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\r\n      \"child classifyResponse:\",\r\n      JSON.stringify(childclassifyResponse)\r\n    );\r\n  }\r\n \r\n  return {\r\n    success: true,\r\n    message: \"Data saved successfully\",\r\n    ErrorObject: ErrorObject,\r\n    Finalmessage: Finalmessage,\r\n  };\r\n};\r\n \r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n \r\n \r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      console.log(\"Processing prodChild:\", prodChild);\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        console.log(\"Released prodChild:\", prodChild);\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        console.log(\"Matching change for prodChild:\", change);\r\n        return !change;\r\n      }\r\n      console.log(\"prodChild state is not 'released':\", prodChild.state);\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n \r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n \r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n \r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n \r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n \r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n \r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n \r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n \r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n \r\n      const patchUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(\"PATCH\",patchUrl, updateBody, );\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n \r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n         \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        \"POST\",\r\n        declassifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n \r\n    console.log(\"All classification API calls completed successfully.\");\r\n \r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};"],"names":["_ref","variant","message","show","className","_jsx","Alert","children","onHide","title","footerButtons","_jsxs","Modal","size","centered","Header","closeButton","Title","Body","Footer","map","btn","index","Button","onClick","label","onConfirm","CustomModal","errors","processedErrors","useMemo","errorGroups","reduce","groups","error","rowMatch","match","columnMatch","errorMsg","split","slice","join","rowNumber","columnName","includes","columns","push","Object","values","sort","a","b","Number","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","style","parent","CellMeasurer","columnIndex","rowIndex","width","column","i","err","ReusableAlert","_Fragment","length","AutoSizer","_ref3","height","List","rowCount","rowHeight","deferredMeasurementCache","console","log","ErrorPopup","forwardRef","ref","data","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","item","original","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","id","cell","row","type","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","getRowModel","forEach","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","columnDef","getContext","accessorKey","WidgetLifecycle","handleDrop","usePlantDropableArea","showSuccessToast","showErrorToast","loading","setLoading","window","widget","trace","addEvent","async","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","userClickedRefresh","sessionStorage","getItem","some","line","isAutoTriggeredRefresh","warn","removeItem","latestDraggedData","store","getState","droppedObject","droppedObjectData","initialDraggedData","items","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","Loader","PlantRenderer","plants","itemId","isRemoveMode","handleRemovePlant","plant","marginRight","display","alignItems","color","fontWeight","PlantName","PlantERPStatus","AiOutlineClose","cursor","marginLeft","PlantID","getTableData","tableData","CAData","mappedData","ItemName","ItemTitle","Plant","ItemPlants","ItemId","Change","Seq","Status","PlantStatus","MFGChange","MFGStatus","ChangeStatus","CAStatus","OracleTemplate","MBom","MBOM","localeCompare","uniqueColumns","header","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","isMFGCA","isStateBlocked","currentState","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","MSG_OPRATION_HANDLE_ON_STATE_ERROR","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","_availablePlantRef$cu","current","AvailablePlant","newItems","DragAndDropComponent","performSearch","useInterComSearch","Image","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","objectId","objectType","callManufacturingCAApi","response","url","body","arguments","undefined","method","JSON","stringify","axios","headers","fetchData","processManufacturingCA","validatedData","showSuccessToastWithProgress","showErrorToastWithProgress","csrfTokenHeaders","fetchCsrfToken","CAHeaders","_objectSpread","credentials","getValue","credentialsParts","companyName","collabSpace","allPlantsData","getAllPlants","manufacturingCABody","excelData","uniquePlantTitles","Set","itemName","toString","trim","plantsList","p","name","add","parentPlants","plantTitle","matchedPlant","find","replace","CATitle","CAOrganization","CACollabSpace","CAOwner","Items","ParentPlants","createManufacturingCABody","event","stopPropagation","navigator","clipboard","writeText","background","border","FaRegCopy","PlantAssignment","useToastWithProgress","isAddingPlant","setIsAddingPlant","setValidatedData","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","initializeDroppableArea","tableKey","setTableKey","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","isFileInputDisabled","setIsFileInputDisabled","isCreateButtonDisabled","setIsCreateButtonDisabled","showConfirmRemove","setShowConfirmRemove","pendingRemoveAction","setPendingRemoveAction","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","setIsRemoveMode","dispatch","useDispatch","securityContext1","fileInputRef","prev","selectedTableRows","_droppedObjectData$in","_droppedObjectData$in2","selectedTitles","removedTitles","updatedTableData","filter","updateTableData","prevKey","prevUniquePlants","handleRemoveData","allPlants","useCallback","plantId","extractPlantData","plantData","plantName","useSelector","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAheaders","CAisMFGCA","loadingParentDetails","proposedChanges","plantObjectData","isDropped","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","productChildren","getUniquePlant","sourceData","assignedTablePlants","flatMap","_item$Plant","uniqueTablePlants","updatedData","cardData","_droppedObjectData$in5","_droppedObjectData$in6","hasMBOM","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in7","_droppedObjectData$in8","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","tableItem","_allPlants$find2","finalObj","classid","classitem","test","concat","MBOMName","MBOMValue","Type","initialClass","_allPlants$find3","classObject","rowstoDelete","_allPlants$find4","classItem","result","saveData","success","Finalmessage","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","userSelect","position","paddingRight","handleCopy","textToCopy","right","top","fontSize","formattedFinalMessage","autoClose","finalobj","ErrorObj","keys","errorObj","processErrorObj","MSG_SAVE_FAILURE","newTableData","uniqueTableData","getUniqueTableData","owner","Owner","Description","imageURL","EIN","getCardData","tableColumns","plantList","tooltipText","Array","isArray","flexDirection","justifyContent","padding","bottom","left","transform","zIndex","gap","link","document","createElement","href","download","click","Form","Group","controlId","Control","multiple","files","target","validExtensions","from","file","toLowerCase","endsWith","value","reader","FileReader","onload","Uint8Array","e","workbook","XLSX","sheetName","SheetNames","sheet","Sheets","jsonData","sheet_to_json","normalizedHeaders","errorDescription","formattedErrors","onerror","readAsArrayBuffer","handleFileChange","finally","disabled","handleReset","FontAwesomeIcon","icon","faRotateLeft","handleHomeClick","setIsDropped","setDroppedObjectData","parentDetails","versions","setPlantObjectData","setCAItemObjectDetails","CardWithDragAndDrop","widgetType","PlantAssignmentToolbarNativeCta","r","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","newPlantsToAdd","existsInRedux","_droppedObjectData$in3","_droppedObjectData$in4","ErrorObject","handleAddData","erroredPlants","_allPlants$find","ClassID","validPlants","invalidPlants","prevUniqueData","rest","_objectWithoutProperties","_excluded","selectedRow","transformedData","getSaveDataForManufacturingCA","updatedCADetails","originalItem","ItemType","ItemState","setCAItemDetails","getSaveDataForCA","_store$getState$dropp","_store$getState$dropp2","droppedItems","ReusableTable","ContentErrorsModal","ConfirmationModal","_droppedObjectData$in9","_droppedObjectData$in10","_droppedObjectData$in11","objectData","payload","CAId","organization","caDetails","ca","_excluded2","PlantType","_droppedObjectData$in12","_droppedObjectData$in13","_droppedObjectData$in14","ItemMBOM","_originalItem$ItemPla","ci","wasInOriginal","isMarkedNew","isMarkedRemove","Boolean","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","querySelector","getElementById","appendChild","ReactDOM","render","Provider","ToastContainer","start","injectedScript","textContent","injectRefreshListener","extractIdsFromTitles","newClasses","itemTitle","productId","declassifyUrl","classifybody","classes","declassifyResponse","productChilds","NotPropagableChilds","prodChild","change","identifier","action","classId","missingIn","child","Childs","classTitle","filteredNewClasses","classifyUrl","classifyResponse","childs","childclassifyResponse","initialAssignedClasses","AllClasses","ENOVIA_BASE_URL","process","WAFData","loadWAFData","fetchOOTBData","Promise","resolve","reject","authenticatedRequest","onComplete","onFailure","prodchilds","notPropagableChild","childId","childName","every","childTitles","errorItem","updateBody","propagateClasses","_response$member$","nextApiUrl","cestamp","member","patchUrl"],"sourceRoot":""}